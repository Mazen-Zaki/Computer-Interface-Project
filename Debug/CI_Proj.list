
CI_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  0800237c  0800237c  0001237c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002384  08002384  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002384  08002384  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002384  08002384  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800238c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000004  08002390  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08002390  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a2d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c13  00000000  00000000  00021aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002e0  00000000  00000000  000226b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000020b  00000000  00000000  00022998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001985  00000000  00000000  00022ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d20  00000000  00000000  00024528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000070ad  00000000  00000000  00026248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009c0  00000000  00000000  0002d2f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0002dcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002364 	.word	0x08002364

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08002364 	.word	0x08002364

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <UART_Call_back>:
 *                                                         Main Function
 * ===================================================================================================================================
 */

void UART_Call_back()
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
	//@F0;
	u8 value;

	if(counter>=0)
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <UART_Call_back+0x5c>)
 80009bc:	f993 3000 	ldrsb.w	r3, [r3]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db17      	blt.n	80009f4 <UART_Call_back+0x40>
	{
		value = UART_u8Recive(UART_6, enable);
 80009c4:	2100      	movs	r1, #0
 80009c6:	2003      	movs	r0, #3
 80009c8:	f001 fbb2 	bl	8002130 <UART_u8Recive>
 80009cc:	4603      	mov	r3, r0
 80009ce:	71fb      	strb	r3, [r7, #7]
	    recived_buffer[counter]=value;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <UART_Call_back+0x5c>)
 80009d2:	f993 3000 	ldrsb.w	r3, [r3]
 80009d6:	4619      	mov	r1, r3
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <UART_Call_back+0x60>)
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	5453      	strb	r3, [r2, r1]
	    if(counter==3)
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <UART_Call_back+0x5c>)
 80009e0:	f993 3000 	ldrsb.w	r3, [r3]
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d105      	bne.n	80009f4 <UART_Call_back+0x40>
	    {
	    	counter=-1;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <UART_Call_back+0x5c>)
 80009ea:	22ff      	movs	r2, #255	; 0xff
 80009ec:	701a      	strb	r2, [r3, #0]
	    	recived_flag=1;
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <UART_Call_back+0x64>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]

	    }
	}
	counter++;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <UART_Call_back+0x5c>)
 80009f6:	f993 3000 	ldrsb.w	r3, [r3]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	3301      	adds	r3, #1
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	b25a      	sxtb	r2, r3
 8000a02:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <UART_Call_back+0x5c>)
 8000a04:	701a      	strb	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000002a 	.word	0x2000002a
 8000a14:	20000024 	.word	0x20000024
 8000a18:	20000028 	.word	0x20000028

08000a1c <send_data>:

void send_data(u8 type,u8 data)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	460a      	mov	r2, r1
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	71bb      	strb	r3, [r7, #6]
	u8 temp = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]

	/*THE START BYTE OF THE FRAME*/
	UART_vTransmite(UART_6, '@', enable);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	2003      	movs	r0, #3
 8000a36:	f001 fb03 	bl	8002040 <UART_vTransmite>

	/*SENDING THE TYPE OF DATA*/
	UART_vTransmite(UART_6, type, enable);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	2003      	movs	r0, #3
 8000a44:	f001 fafc 	bl	8002040 <UART_vTransmite>

	/*SENDING EQUAL SIGN*/
	UART_vTransmite(UART_6, '=', enable);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	213d      	movs	r1, #61	; 0x3d
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f001 faf7 	bl	8002040 <UART_vTransmite>

	/*SENDING THE DATA BASED ON HOW MANY DIGITS OF DATA WILL BE SEND*/
	if(data == 0)
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d105      	bne.n	8000a64 <send_data+0x48>
	{
		/*SENDING ONE DIGIT AND MAKE SURE THAT IT IS ZERO*/
		UART_vTransmite(UART_6, '0', enable);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2130      	movs	r1, #48	; 0x30
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f001 faef 	bl	8002040 <UART_vTransmite>
 8000a62:	e06f      	b.n	8000b44 <send_data+0x128>
	}
	else if(data < 10)
 8000a64:	79bb      	ldrb	r3, [r7, #6]
 8000a66:	2b09      	cmp	r3, #9
 8000a68:	d809      	bhi.n	8000a7e <send_data+0x62>
	{
		/*SENDING DATA WHEN IT IS ONE DIGIT ONLY*/
		UART_vTransmite(UART_6, (data + 48), enable);
 8000a6a:	79bb      	ldrb	r3, [r7, #6]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	3330      	adds	r3, #48	; 0x30
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	2200      	movs	r2, #0
 8000a74:	4619      	mov	r1, r3
 8000a76:	2003      	movs	r0, #3
 8000a78:	f001 fae2 	bl	8002040 <UART_vTransmite>
 8000a7c:	e062      	b.n	8000b44 <send_data+0x128>
	}
	else if (data < 100)
 8000a7e:	79bb      	ldrb	r3, [r7, #6]
 8000a80:	2b63      	cmp	r3, #99	; 0x63
 8000a82:	d823      	bhi.n	8000acc <send_data+0xb0>
	{
		/*SENDING DATA WHEN IT IS TWO DIGIT ONLY*/
		temp = data / 10;
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	4a34      	ldr	r2, [pc, #208]	; (8000b58 <send_data+0x13c>)
 8000a88:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8c:	08db      	lsrs	r3, r3, #3
 8000a8e:	73fb      	strb	r3, [r7, #15]
		UART_vTransmite(UART_6, temp + 48, enable); // SENDING THE TENS AT FIRST
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	3330      	adds	r3, #48	; 0x30
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f001 facf 	bl	8002040 <UART_vTransmite>
		temp = data % 10;
 8000aa2:	79ba      	ldrb	r2, [r7, #6]
 8000aa4:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <send_data+0x13c>)
 8000aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aaa:	08d9      	lsrs	r1, r3, #3
 8000aac:	460b      	mov	r3, r1
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	73fb      	strb	r3, [r7, #15]
		UART_vTransmite(UART_6, temp + 48, enable); // SENDING THE ONES SECOND
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	3330      	adds	r3, #48	; 0x30
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f001 fabb 	bl	8002040 <UART_vTransmite>
 8000aca:	e03b      	b.n	8000b44 <send_data+0x128>
	}
	else if (data < 1000)
		{
			/*SENDING DATA WHEN IT IS TWO DIGIT ONLY*/
			temp = data / 100;
 8000acc:	79bb      	ldrb	r3, [r7, #6]
 8000ace:	4a23      	ldr	r2, [pc, #140]	; (8000b5c <send_data+0x140>)
 8000ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad4:	095b      	lsrs	r3, r3, #5
 8000ad6:	73fb      	strb	r3, [r7, #15]
			UART_vTransmite(UART_6, temp + 48, enable); // SENDING THE TENS AT FIRST
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	3330      	adds	r3, #48	; 0x30
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f001 faab 	bl	8002040 <UART_vTransmite>
			temp = (data / 10) % 10;
 8000aea:	79bb      	ldrb	r3, [r7, #6]
 8000aec:	4a1a      	ldr	r2, [pc, #104]	; (8000b58 <send_data+0x13c>)
 8000aee:	fba2 2303 	umull	r2, r3, r2, r3
 8000af2:	08db      	lsrs	r3, r3, #3
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <send_data+0x13c>)
 8000af8:	fba3 1302 	umull	r1, r3, r3, r2
 8000afc:	08d9      	lsrs	r1, r3, #3
 8000afe:	460b      	mov	r3, r1
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	440b      	add	r3, r1
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	73fb      	strb	r3, [r7, #15]
			UART_vTransmite(UART_6, temp + 48, enable); // SENDING THE ONES SECOND
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	3330      	adds	r3, #48	; 0x30
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	2200      	movs	r2, #0
 8000b14:	4619      	mov	r1, r3
 8000b16:	2003      	movs	r0, #3
 8000b18:	f001 fa92 	bl	8002040 <UART_vTransmite>
			temp = data  % 10;
 8000b1c:	79ba      	ldrb	r2, [r7, #6]
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <send_data+0x13c>)
 8000b20:	fba3 1302 	umull	r1, r3, r3, r2
 8000b24:	08d9      	lsrs	r1, r3, #3
 8000b26:	460b      	mov	r3, r1
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	73fb      	strb	r3, [r7, #15]
			UART_vTransmite(UART_6, temp + 48, enable); // SENDING THE ONES SECOND
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	3330      	adds	r3, #48	; 0x30
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	2003      	movs	r0, #3
 8000b40:	f001 fa7e 	bl	8002040 <UART_vTransmite>
	{
		/*DO NOTHING*/
	}

	/*THE END BYTE OF THE FRAME*/
	UART_vTransmite(UART_6, ';', enable);
 8000b44:	2200      	movs	r2, #0
 8000b46:	213b      	movs	r1, #59	; 0x3b
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f001 fa79 	bl	8002040 <UART_vTransmite>

}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	cccccccd 	.word	0xcccccccd
 8000b5c:	51eb851f 	.word	0x51eb851f

08000b60 <tempSensor>:

u8 Global_u8Temp_value_old = 0;

void tempSensor()
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	/*READING THE TEMPRATURE SENSOR THROUGH THE ADC CHANNEL 4*/
	Global_u8Temp_value = LM35_u16_Get_Temp(ADC_CHANNEL_4);
 8000b64:	2004      	movs	r0, #4
 8000b66:	f000 fba9 	bl	80012bc <LM35_u16_Get_Temp>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <tempSensor+0x8c>)
 8000b70:	701a      	strb	r2, [r3, #0]



	LCD_enuGoTo(0,0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 faf5 	bl	8001164 <LCD_enuGoTo>
	LCD_enuSendString("TEMP = ");
 8000b7a:	481d      	ldr	r0, [pc, #116]	; (8000bf0 <tempSensor+0x90>)
 8000b7c:	f000 fb1e 	bl	80011bc <LCD_enuSendString>
	LCD_enuSendNumber(Global_u8Temp_value-20);
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <tempSensor+0x8c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	3b14      	subs	r3, #20
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fb36 	bl	80011f8 <LCD_enuSendNumber>


	/*CONTROLLING THE FAN DEPENDING ON THE READING OF THE TEMPRATURE SENSOR AND THE tempAuto_flag */
	if((Global_u8Temp_value > 25) && (tempAuto_flag == 1)) // TURN ON THE FAN
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <tempSensor+0x8c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	d909      	bls.n	8000ba8 <tempSensor+0x48>
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <tempSensor+0x94>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d105      	bne.n	8000ba8 <tempSensor+0x48>
	{
		MGPIO_voidWriteData(_GPIOB_PORT,_PIN_12,HIGH);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	210c      	movs	r1, #12
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f000 fd47 	bl	8001634 <MGPIO_voidWriteData>
 8000ba6:	e00c      	b.n	8000bc2 <tempSensor+0x62>
	}
	else if((Global_u8Temp_value < 25) && (tempAuto_flag == 1)) // TURN OFF THE FAN
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <tempSensor+0x8c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b18      	cmp	r3, #24
 8000bae:	d808      	bhi.n	8000bc2 <tempSensor+0x62>
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <tempSensor+0x94>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d104      	bne.n	8000bc2 <tempSensor+0x62>
	{
		MGPIO_voidWriteData(_GPIOB_PORT,_PIN_12,LOW);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	210c      	movs	r1, #12
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f000 fd39 	bl	8001634 <MGPIO_voidWriteData>
		/*DO NOTHING*/
	}

	/*CHECKING IF THE VALUE OF THE TEMPRATURE HAS CHANGED OR NOT */
	/*IF THE VALUE HAS CHANGED THEN SEND THE NEW VALUE TO THE GUI*/
	if(Global_u8Temp_value_old != Global_u8Temp_value)
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <tempSensor+0x98>)
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <tempSensor+0x8c>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d00b      	beq.n	8000be6 <tempSensor+0x86>
	{
		Global_u8Temp_value_old = Global_u8Temp_value;
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <tempSensor+0x8c>)
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <tempSensor+0x98>)
 8000bd4:	701a      	strb	r2, [r3, #0]
		send_data('T', (Global_u8Temp_value -20));
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <tempSensor+0x8c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	3b14      	subs	r3, #20
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	4619      	mov	r1, r3
 8000be0:	2054      	movs	r0, #84	; 0x54
 8000be2:	f7ff ff1b 	bl	8000a1c <send_data>





}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000020 	.word	0x20000020
 8000bf0:	0800237c 	.word	0x0800237c
 8000bf4:	20000029 	.word	0x20000029
 8000bf8:	2000002b 	.word	0x2000002b

08000bfc <gasSensor>:
u8 Global_u8GAS_value;
u8 Global_u8Gas_value_old = 1;


void gasSensor()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	Global_u8GAS_value = MGPIO_u8ReadData(_GPIOA_PORT,_PIN_10);
 8000c00:	210a      	movs	r1, #10
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 fcaa 	bl	800155c <MGPIO_u8ReadData>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <gasSensor+0x38>)
 8000c0e:	701a      	strb	r2, [r3, #0]


	/*CHECKING IF THE VALUE OF THE TEMPRATURE HAS CHANGED OR NOT */
	/*IF THE VALUE HAS CHANGED THEN SEND THE NEW VALUE TO THE GUI*/
	if(Global_u8Gas_value_old != Global_u8GAS_value)
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <gasSensor+0x3c>)
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <gasSensor+0x38>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d009      	beq.n	8000c30 <gasSensor+0x34>
	{
		Global_u8Gas_value_old = Global_u8GAS_value;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <gasSensor+0x38>)
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <gasSensor+0x3c>)
 8000c22:	701a      	strb	r2, [r3, #0]
		send_data('F', Global_u8GAS_value);
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <gasSensor+0x38>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	2046      	movs	r0, #70	; 0x46
 8000c2c:	f7ff fef6 	bl	8000a1c <send_data>
	{
		/*DO NOTHING*/

	}

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000002c 	.word	0x2000002c
 8000c38:	20000000 	.word	0x20000000

08000c3c <LDR_Sensor>:
u16 Global_u8LDR_value = 0;
u16 Global_u8LDR_value_old = 0;


void LDR_Sensor()
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	Global_u8LDR_value = LDR_u32_Get_value(ADC_CHANNEL_5);
 8000c40:	2005      	movs	r0, #5
 8000c42:	f000 fb25 	bl	8001290 <LDR_u32_Get_value>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <LDR_Sensor+0x38>)
 8000c4c:	801a      	strh	r2, [r3, #0]



	/*CHECKING IF THE VALUE OF THE LDR HAS CHANGED OR NOT */
	/*IF THE VALUE HAS CHANGED THEN SEND THE NEW VALUE TO THE GUI*/
	if(Global_u8LDR_value != Global_u8LDR_value_old)
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <LDR_Sensor+0x38>)
 8000c50:	881a      	ldrh	r2, [r3, #0]
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <LDR_Sensor+0x3c>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d00a      	beq.n	8000c70 <LDR_Sensor+0x34>
	{
		Global_u8LDR_value_old = Global_u8LDR_value;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <LDR_Sensor+0x38>)
 8000c5c:	881a      	ldrh	r2, [r3, #0]
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <LDR_Sensor+0x3c>)
 8000c60:	801a      	strh	r2, [r3, #0]
		send_data('L', Global_u8LDR_value);
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <LDR_Sensor+0x38>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	4619      	mov	r1, r3
 8000c6a:	204c      	movs	r0, #76	; 0x4c
 8000c6c:	f7ff fed6 	bl	8000a1c <send_data>
	else
	{
		/*DO NOTHING*/
	}

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000002e 	.word	0x2000002e
 8000c78:	20000030 	.word	0x20000030

08000c7c <main>:




int main()
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0

/************************************** RCC *************************************/
	MRCC_voidInitClock(HSI,_HSE_CRYSTAL,_HSE_PLL);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	2001      	movs	r0, #1
 8000c88:	f000 ff00 	bl	8001a8c <MRCC_voidInitClock>
	MRCC_voidEnablePeripheralClock(AHB1_BUS,_PERIPHERAL_EN_GPIOA);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 feaa 	bl	80019e8 <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(AHB1_BUS,_PERIPHERAL_EN_GPIOB);
 8000c94:	2101      	movs	r1, #1
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 fea6 	bl	80019e8 <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(AHB1_BUS,_PERIPHERAL_EN_GPIOC);
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 fea2 	bl	80019e8 <MRCC_voidEnablePeripheralClock>

	MRCC_voidEnablePeripheralClock(APB2_BUS,PERIPHERAL_EN_ADC1);
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	f000 fe9e 	bl	80019e8 <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(APB2_BUS,PERIPHERAL_EN_USART6);
 8000cac:	2105      	movs	r1, #5
 8000cae:	2003      	movs	r0, #3
 8000cb0:	f000 fe9a 	bl	80019e8 <MRCC_voidEnablePeripheralClock>

/****************************************** GPIO PINS **************************/
    //FOR LCD
	MGPIO_voidSetPinMode(_GPIOA_PORT,_PIN_0,_MODE_OUTPUT);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f000 fb67 	bl	800138c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(_GPIOA_PORT,_PIN_1,_MODE_OUTPUT);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 fb62 	bl	800138c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(_GPIOA_PORT,_PIN_2,_MODE_OUTPUT);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2102      	movs	r1, #2
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 fb5d 	bl	800138c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(_GPIOA_PORT,_PIN_3,_MODE_OUTPUT);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f000 fb58 	bl	800138c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(_GPIOA_PORT,_PIN_6,_MODE_OUTPUT);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2106      	movs	r1, #6
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f000 fb53 	bl	800138c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(_GPIOA_PORT,_PIN_7,_MODE_OUTPUT);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2107      	movs	r1, #7
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 fb4e 	bl	800138c <MGPIO_voidSetPinMode>


	MGPIO_voidSetPinMode(_GPIOB_PORT,_PIN_12,_MODE_OUTPUT);//FAN
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	210c      	movs	r1, #12
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f000 fb49 	bl	800138c <MGPIO_voidSetPinMode>

	//For DOOR

	MGPIO_voidSetPinMode(_GPIOC_PORT,_PIN_14,_MODE_OUTPUT); //MOTOR M1
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	210e      	movs	r1, #14
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f000 fb44 	bl	800138c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(_GPIOC_PORT,_PIN_15,_MODE_OUTPUT);//MOTOR M2
 8000d04:	2201      	movs	r2, #1
 8000d06:	210f      	movs	r1, #15
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f000 fb3f 	bl	800138c <MGPIO_voidSetPinMode>

	MGPIO_voidSetPinMode(_GPIOA_PORT,_PIN_10,_MODE_INPUT); //smoke
 8000d0e:	2200      	movs	r2, #0
 8000d10:	210a      	movs	r1, #10
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 fb3a 	bl	800138c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPullType(_GPIOA_PORT,_PIN_10,_PULL_UP);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	210a      	movs	r1, #10
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f000 fbad 	bl	800147c <MGPIO_voidSetPullType>

	//For Garage
	MGPIO_voidSetPinMode(_GPIOB_PORT,_PIN_5,_MODE_OUTPUT);//LED
 8000d22:	2201      	movs	r2, #1
 8000d24:	2105      	movs	r1, #5
 8000d26:	2001      	movs	r0, #1
 8000d28:	f000 fb30 	bl	800138c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(_GPIOB_PORT,_PIN_6,_MODE_OUTPUT);//LED
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2106      	movs	r1, #6
 8000d30:	2001      	movs	r0, #1
 8000d32:	f000 fb2b 	bl	800138c <MGPIO_voidSetPinMode>


	// ADC Pins
    MGPIO_voidSetPinMode(_GPIOA_PORT , _PIN_4 , _MODE_ANALOG );//LM35
 8000d36:	2203      	movs	r2, #3
 8000d38:	2104      	movs	r1, #4
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 fb26 	bl	800138c <MGPIO_voidSetPinMode>

    MGPIO_voidSetPinMode(_GPIOA_PORT , _PIN_5 , _MODE_ANALOG );//GARAGE
 8000d40:	2203      	movs	r2, #3
 8000d42:	2105      	movs	r1, #5
 8000d44:	2000      	movs	r0, #0
 8000d46:	f000 fb21 	bl	800138c <MGPIO_voidSetPinMode>

    //Uart Pins
	MGPIO_voidSetPinMode(_GPIOA_PORT,_PIN_11,_MODE_ALTF);
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	210b      	movs	r1, #11
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 fb1c 	bl	800138c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(_GPIOA_PORT,_PIN_12,_MODE_ALTF);
 8000d54:	2202      	movs	r2, #2
 8000d56:	210c      	movs	r1, #12
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f000 fb17 	bl	800138c <MGPIO_voidSetPinMode>
    MGPIO_voidSetPinAltFn(_GPIOA_PORT , _PIN_11, _ALTFN_8 );
 8000d5e:	2208      	movs	r2, #8
 8000d60:	210b      	movs	r1, #11
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 fd3a 	bl	80017dc <MGPIO_voidSetPinAltFn>
    MGPIO_voidSetPinAltFn(_GPIOA_PORT , _PIN_12, _ALTFN_8 );
 8000d68:	2208      	movs	r2, #8
 8000d6a:	210c      	movs	r1, #12
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f000 fd35 	bl	80017dc <MGPIO_voidSetPinAltFn>



/********************************* Initilizations *******************************/
    SysTick_vInit();
 8000d72:	f000 ff85 	bl	8001c80 <SysTick_vInit>
    LM35_vidInit();
 8000d76:	f000 fa9b 	bl	80012b0 <LM35_vidInit>
    LCD_VidInit();
 8000d7a:	f000 f8e0 	bl	8000f3e <LCD_VidInit>


	UART_tstrConfiguration object;
	object.UART_BaudRate = UART_BAUDRATE_9600;
 8000d7e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000d82:	60fb      	str	r3, [r7, #12]
	object.UART_Interrupt_Enable = UART_INT_ENABLE_RXNEIE;
 8000d84:	2320      	movs	r3, #32
 8000d86:	823b      	strh	r3, [r7, #16]
	object.p_IRQ_CallBack = UART_Call_back;
 8000d88:	4b60      	ldr	r3, [pc, #384]	; (8000f0c <main+0x290>)
 8000d8a:	617b      	str	r3, [r7, #20]
	object.UART_ParityBit = UART_NONE_PARITY;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	80fb      	strh	r3, [r7, #6]
	object.UART_PStopBits =  UART_ONE_STOP_BIT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	813b      	strh	r3, [r7, #8]
	object.UART_WordLength =UART_EIGHT_DATA_BITS;
 8000d94:	2300      	movs	r3, #0
 8000d96:	817b      	strh	r3, [r7, #10]
	object.UART_Mode = UART_FULL_DUPLEX;
 8000d98:	230c      	movs	r3, #12
 8000d9a:	80bb      	strh	r3, [r7, #4]
    UART_vInit(UART_6, &object);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	2003      	movs	r0, #3
 8000da2:	f001 f80f 	bl	8001dc4 <UART_vInit>


 while (1)
 {
	tempSensor();
 8000da6:	f7ff fedb 	bl	8000b60 <tempSensor>
	Systic_vDelay_ms(100);
 8000daa:	2064      	movs	r0, #100	; 0x64
 8000dac:	f000 ffb0 	bl	8001d10 <Systic_vDelay_ms>

	gasSensor();
 8000db0:	f7ff ff24 	bl	8000bfc <gasSensor>
	Systic_vDelay_ms(100);
 8000db4:	2064      	movs	r0, #100	; 0x64
 8000db6:	f000 ffab 	bl	8001d10 <Systic_vDelay_ms>

	LDR_Sensor();
 8000dba:	f7ff ff3f 	bl	8000c3c <LDR_Sensor>
	Systic_vDelay_ms(100);
 8000dbe:	2064      	movs	r0, #100	; 0x64
 8000dc0:	f000 ffa6 	bl	8001d10 <Systic_vDelay_ms>


	 if(recived_flag==1)
 8000dc4:	4b52      	ldr	r3, [pc, #328]	; (8000f10 <main+0x294>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d1ec      	bne.n	8000da6 <main+0x12a>
	 {
		 recived_flag=0;
 8000dcc:	4b50      	ldr	r3, [pc, #320]	; (8000f10 <main+0x294>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]

		 switch(recived_buffer[1])
 8000dd2:	4b50      	ldr	r3, [pc, #320]	; (8000f14 <main+0x298>)
 8000dd4:	785b      	ldrb	r3, [r3, #1]
 8000dd6:	2b4c      	cmp	r3, #76	; 0x4c
 8000dd8:	d063      	beq.n	8000ea2 <main+0x226>
 8000dda:	2b4c      	cmp	r3, #76	; 0x4c
 8000ddc:	f300 808e 	bgt.w	8000efc <main+0x280>
 8000de0:	2b44      	cmp	r3, #68	; 0x44
 8000de2:	d024      	beq.n	8000e2e <main+0x1b2>
 8000de4:	2b46      	cmp	r3, #70	; 0x46
 8000de6:	f040 8089 	bne.w	8000efc <main+0x280>
		 {
		 case 'F' :
			 	 	 if (recived_buffer[2]=='0')
 8000dea:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <main+0x298>)
 8000dec:	789b      	ldrb	r3, [r3, #2]
 8000dee:	2b30      	cmp	r3, #48	; 0x30
 8000df0:	d108      	bne.n	8000e04 <main+0x188>
			 	 	 {
			 	 		 MGPIO_voidWriteData(_GPIOB_PORT,_PIN_12,LOW);
 8000df2:	2200      	movs	r2, #0
 8000df4:	210c      	movs	r1, #12
 8000df6:	2001      	movs	r0, #1
 8000df8:	f000 fc1c 	bl	8001634 <MGPIO_voidWriteData>
						 tempAuto_flag = 0;
 8000dfc:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <main+0x29c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
					 else if(recived_buffer[2]=='A') // AUTO TURN ON/OFF THE FAN BASED ON THE TEMPRATURE
			 	 	 {
			 	 		 tempAuto_flag = 1;
			 	 	 }

			 	 	 break;
 8000e02:	e07d      	b.n	8000f00 <main+0x284>
			 	 	 else if(recived_buffer[2]=='1')
 8000e04:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <main+0x298>)
 8000e06:	789b      	ldrb	r3, [r3, #2]
 8000e08:	2b31      	cmp	r3, #49	; 0x31
 8000e0a:	d108      	bne.n	8000e1e <main+0x1a2>
			 	 		 MGPIO_voidWriteData(_GPIOB_PORT,_PIN_12,HIGH);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	210c      	movs	r1, #12
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 fc0f 	bl	8001634 <MGPIO_voidWriteData>
						 tempAuto_flag = 0;
 8000e16:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <main+0x29c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
			 	 	 break;
 8000e1c:	e070      	b.n	8000f00 <main+0x284>
					 else if(recived_buffer[2]=='A') // AUTO TURN ON/OFF THE FAN BASED ON THE TEMPRATURE
 8000e1e:	4b3d      	ldr	r3, [pc, #244]	; (8000f14 <main+0x298>)
 8000e20:	789b      	ldrb	r3, [r3, #2]
 8000e22:	2b41      	cmp	r3, #65	; 0x41
 8000e24:	d16c      	bne.n	8000f00 <main+0x284>
			 	 		 tempAuto_flag = 1;
 8000e26:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <main+0x29c>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
			 	 	 break;
 8000e2c:	e068      	b.n	8000f00 <main+0x284>
		 case 'D' :
			 	 	 if (recived_buffer[2]=='0')
 8000e2e:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <main+0x298>)
 8000e30:	789b      	ldrb	r3, [r3, #2]
 8000e32:	2b30      	cmp	r3, #48	; 0x30
 8000e34:	d10a      	bne.n	8000e4c <main+0x1d0>
					 {
			 	 		MGPIO_voidWriteData(_GPIOC_PORT,_PIN_14,LOW);//MOTOR M1
 8000e36:	2200      	movs	r2, #0
 8000e38:	210e      	movs	r1, #14
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f000 fbfa 	bl	8001634 <MGPIO_voidWriteData>
			 	 		MGPIO_voidWriteData(_GPIOC_PORT,_PIN_15,LOW);//MOTOR M2
 8000e40:	2200      	movs	r2, #0
 8000e42:	210f      	movs	r1, #15
 8000e44:	2002      	movs	r0, #2
 8000e46:	f000 fbf5 	bl	8001634 <MGPIO_voidWriteData>
							MGPIO_voidWriteData(_GPIOC_PORT,_PIN_14,LOW);//MOTOR M1
							MGPIO_voidWriteData(_GPIOC_PORT,_PIN_15,LOW);//MOTOR M2

				 	 }

			 	 	 break;
 8000e4a:	e05b      	b.n	8000f04 <main+0x288>
					 else if(recived_buffer[2]=='1')
 8000e4c:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <main+0x298>)
 8000e4e:	789b      	ldrb	r3, [r3, #2]
 8000e50:	2b31      	cmp	r3, #49	; 0x31
 8000e52:	d157      	bne.n	8000f04 <main+0x288>
							MGPIO_voidWriteData(_GPIOC_PORT,_PIN_14,HIGH);//MOTOR M1
 8000e54:	2201      	movs	r2, #1
 8000e56:	210e      	movs	r1, #14
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f000 fbeb 	bl	8001634 <MGPIO_voidWriteData>
						    MGPIO_voidWriteData(_GPIOC_PORT,_PIN_15,LOW);//MOTOR M2
 8000e5e:	2200      	movs	r2, #0
 8000e60:	210f      	movs	r1, #15
 8000e62:	2002      	movs	r0, #2
 8000e64:	f000 fbe6 	bl	8001634 <MGPIO_voidWriteData>
						    Systic_vDelay_ms(1000);
 8000e68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e6c:	f000 ff50 	bl	8001d10 <Systic_vDelay_ms>
							MGPIO_voidWriteData(_GPIOC_PORT,_PIN_14,LOW);//MOTOR M1
 8000e70:	2200      	movs	r2, #0
 8000e72:	210e      	movs	r1, #14
 8000e74:	2002      	movs	r0, #2
 8000e76:	f000 fbdd 	bl	8001634 <MGPIO_voidWriteData>
							MGPIO_voidWriteData(_GPIOC_PORT,_PIN_15,HIGH);//MOTOR M2
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	210f      	movs	r1, #15
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f000 fbd8 	bl	8001634 <MGPIO_voidWriteData>
							Systic_vDelay_ms(1000);
 8000e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e88:	f000 ff42 	bl	8001d10 <Systic_vDelay_ms>
							MGPIO_voidWriteData(_GPIOC_PORT,_PIN_14,LOW);//MOTOR M1
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	210e      	movs	r1, #14
 8000e90:	2002      	movs	r0, #2
 8000e92:	f000 fbcf 	bl	8001634 <MGPIO_voidWriteData>
							MGPIO_voidWriteData(_GPIOC_PORT,_PIN_15,LOW);//MOTOR M2
 8000e96:	2200      	movs	r2, #0
 8000e98:	210f      	movs	r1, #15
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f000 fbca 	bl	8001634 <MGPIO_voidWriteData>
			 	 	 break;
 8000ea0:	e030      	b.n	8000f04 <main+0x288>
		 case 'L' :

			 	 	 if (recived_buffer[2]=='0')
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <main+0x298>)
 8000ea4:	789b      	ldrb	r3, [r3, #2]
 8000ea6:	2b30      	cmp	r3, #48	; 0x30
 8000ea8:	d10a      	bne.n	8000ec0 <main+0x244>
			 	 	 {
				 		 MGPIO_voidWriteData(_GPIOB_PORT,_PIN_5,LOW);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2105      	movs	r1, #5
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f000 fbc0 	bl	8001634 <MGPIO_voidWriteData>
						 MGPIO_voidWriteData(_GPIOB_PORT,_PIN_6,LOW);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2106      	movs	r1, #6
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f000 fbbb 	bl	8001634 <MGPIO_voidWriteData>
					 else if(recived_buffer[2]=='2')
					 {
						MGPIO_voidWriteData(_GPIOB_PORT,_PIN_5,HIGH);
						MGPIO_voidWriteData(_GPIOB_PORT,_PIN_6,HIGH);
					 }
			 	 	break;
 8000ebe:	e023      	b.n	8000f08 <main+0x28c>
			 	 	 else if(recived_buffer[2]=='1')
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <main+0x298>)
 8000ec2:	789b      	ldrb	r3, [r3, #2]
 8000ec4:	2b31      	cmp	r3, #49	; 0x31
 8000ec6:	d10a      	bne.n	8000ede <main+0x262>
				 		 MGPIO_voidWriteData(_GPIOB_PORT,_PIN_5,HIGH);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2105      	movs	r1, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f000 fbb1 	bl	8001634 <MGPIO_voidWriteData>
						 MGPIO_voidWriteData(_GPIOB_PORT,_PIN_6,LOW);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2106      	movs	r1, #6
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 fbac 	bl	8001634 <MGPIO_voidWriteData>
			 	 	break;
 8000edc:	e014      	b.n	8000f08 <main+0x28c>
					 else if(recived_buffer[2]=='2')
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <main+0x298>)
 8000ee0:	789b      	ldrb	r3, [r3, #2]
 8000ee2:	2b32      	cmp	r3, #50	; 0x32
 8000ee4:	d110      	bne.n	8000f08 <main+0x28c>
						MGPIO_voidWriteData(_GPIOB_PORT,_PIN_5,HIGH);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2105      	movs	r1, #5
 8000eea:	2001      	movs	r0, #1
 8000eec:	f000 fba2 	bl	8001634 <MGPIO_voidWriteData>
						MGPIO_voidWriteData(_GPIOB_PORT,_PIN_6,HIGH);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2106      	movs	r1, #6
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f000 fb9d 	bl	8001634 <MGPIO_voidWriteData>
			 	 	break;
 8000efa:	e005      	b.n	8000f08 <main+0x28c>

		 default  :
				    break;
 8000efc:	bf00      	nop
 8000efe:	e752      	b.n	8000da6 <main+0x12a>
			 	 	 break;
 8000f00:	bf00      	nop
 8000f02:	e750      	b.n	8000da6 <main+0x12a>
			 	 	 break;
 8000f04:	bf00      	nop
 8000f06:	e74e      	b.n	8000da6 <main+0x12a>
			 	 	break;
 8000f08:	bf00      	nop
	tempSensor();
 8000f0a:	e74c      	b.n	8000da6 <main+0x12a>
 8000f0c:	080009b5 	.word	0x080009b5
 8000f10:	20000028 	.word	0x20000028
 8000f14:	20000024 	.word	0x20000024
 8000f18:	20000029 	.word	0x20000029

08000f1c <LCD_vidSendEnable>:

//------------PRIVATE------------//


static void LCD_vidSendEnable(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	MGPIO_voidWriteData(LCD_u8_E_PORT,LCD_u8_E_PIN,HIGH);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2106      	movs	r1, #6
 8000f24:	2000      	movs	r0, #0
 8000f26:	f000 fb85 	bl	8001634 <MGPIO_voidWriteData>
	Systic_vDelay_ms(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 fef0 	bl	8001d10 <Systic_vDelay_ms>
	MGPIO_voidWriteData(LCD_u8_E_PORT,LCD_u8_E_PIN,LOW);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2106      	movs	r1, #6
 8000f34:	2000      	movs	r0, #0
 8000f36:	f000 fb7d 	bl	8001634 <MGPIO_voidWriteData>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <LCD_VidInit>:
 * Description: initialize the LCD in 8 bit mode
 * Argument: void
 * Return: void
 * */
void LCD_VidInit(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
	LCD_enuSendInstruction(LCD_u8_CURSOR_INC_SHIFT_OFF);
	Systic_vDelay_ms(7);
 
 #elif defined four_bit_mode 

	Systic_vDelay_ms(32);
 8000f42:	2020      	movs	r0, #32
 8000f44:	f000 fee4 	bl	8001d10 <Systic_vDelay_ms>


   LCD_enuSendInstruction(0x02);
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f000 f891 	bl	8001070 <LCD_enuSendInstruction>

 	/* function set */
 	LCD_enuSendInstruction(LCD_u8_FUNCTION_SET);
 8000f4e:	2028      	movs	r0, #40	; 0x28
 8000f50:	f000 f88e 	bl	8001070 <LCD_enuSendInstruction>

 	Systic_vDelay_ms(1);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f000 fedb 	bl	8001d10 <Systic_vDelay_ms>
 	/* display control */
 	LCD_enuSendInstruction(LCD_u8_DISPLAY_ON_CURSOR_OFF);
 8000f5a:	200c      	movs	r0, #12
 8000f5c:	f000 f888 	bl	8001070 <LCD_enuSendInstruction>

 	Systic_vDelay_ms(1);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f000 fed5 	bl	8001d10 <Systic_vDelay_ms>
 	/* display control */
 	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 f882 	bl	8001070 <LCD_enuSendInstruction>

 //	LCD_enuSendInstruction(LCD_u8_RETURN_HOME);

 	Systic_vDelay_ms(2);
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f000 fecf 	bl	8001d10 <Systic_vDelay_ms>
	 
 	/* entry mode */
 	LCD_enuSendInstruction(LCD_u8_CURSOR_INC_SHIFT_OFF);
 8000f72:	2006      	movs	r0, #6
 8000f74:	f000 f87c 	bl	8001070 <LCD_enuSendInstruction>
 	Systic_vDelay_ms(7);
 8000f78:	2007      	movs	r0, #7
 8000f7a:	f000 fec9 	bl	8001d10 <Systic_vDelay_ms>

 #endif
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <LCD_enuSendCharacter>:
 * Description: send ASCII CODE Character to LCD Microcontroller
 * Argument: Copy_u8Character   (The Desired Character to be Displayed)
 * Return: void
 * */
void LCD_enuSendCharacter(u8 Copy_u8Character)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
#elif defined four_bit_mode


           // *************************** SENDING THE THE HIGH NIBBLE FIRST *******************************/////
       	    		  /* Rs pin ----> high */
               	       MGPIO_voidWriteData(LCD_u8_RS_PORT,LCD_u8_RS_PIN,HIGH);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2107      	movs	r1, #7
 8000f90:	2000      	movs	r0, #0
 8000f92:	f000 fb4f 	bl	8001634 <MGPIO_voidWriteData>

       	    		  /* RW pin ----> low */
               	   	   MGPIO_voidWriteData(LCD_u8_RW_PORT, LCD_u8_RW_PIN,LOW);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2109      	movs	r1, #9
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f000 fb4a 	bl	8001634 <MGPIO_voidWriteData>

                      // Send data //
       	    		  MGPIO_voidWriteData(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Character >> 4) & 1);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	091b      	lsrs	r3, r3, #4
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	2103      	movs	r1, #3
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 fb3f 	bl	8001634 <MGPIO_voidWriteData>
       	    		  MGPIO_voidWriteData(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Character >> 5) & 1);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	095b      	lsrs	r3, r3, #5
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 fb34 	bl	8001634 <MGPIO_voidWriteData>
       	    		  MGPIO_voidWriteData(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Character >> 6) & 1);
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	099b      	lsrs	r3, r3, #6
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	2101      	movs	r1, #1
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f000 fb29 	bl	8001634 <MGPIO_voidWriteData>
       	    		  MGPIO_voidWriteData(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Character >> 7) & 1);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	09db      	lsrs	r3, r3, #7
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	2100      	movs	r1, #0
 8000fec:	2000      	movs	r0, #0
 8000fee:	f000 fb21 	bl	8001634 <MGPIO_voidWriteData>

       	    		  //     	 DIO_enuSetPortValue(DIO_u8_PORTC, Copy_u8Character);
       	    		  // Enable //
       	    		  LCD_vidSendEnable();
 8000ff2:	f7ff ff93 	bl	8000f1c <LCD_vidSendEnable>
						 
		 // *************************** SENDING THE THE lOW NIBBLE FIRST ********************************//////	 
						  	  /* Rs pin ----> high */
       	    		  MGPIO_voidWriteData(LCD_u8_RS_PORT,LCD_u8_RS_PIN,HIGH);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2107      	movs	r1, #7
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 fb1a 	bl	8001634 <MGPIO_voidWriteData>
				       
				       /* RW pin ----> low */
       	    		  MGPIO_voidWriteData(LCD_u8_RW_PORT, LCD_u8_RW_PIN,LOW);
 8001000:	2200      	movs	r2, #0
 8001002:	2109      	movs	r1, #9
 8001004:	2001      	movs	r0, #1
 8001006:	f000 fb15 	bl	8001634 <MGPIO_voidWriteData>
				       
				       // Send data //
				       MGPIO_voidWriteData(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Character >> 0) & 1);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	461a      	mov	r2, r3
 8001014:	2103      	movs	r1, #3
 8001016:	2000      	movs	r0, #0
 8001018:	f000 fb0c 	bl	8001634 <MGPIO_voidWriteData>
				       MGPIO_voidWriteData(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Character >> 1) & 1);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	085b      	lsrs	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	461a      	mov	r2, r3
 800102a:	2102      	movs	r1, #2
 800102c:	2000      	movs	r0, #0
 800102e:	f000 fb01 	bl	8001634 <MGPIO_voidWriteData>
				       MGPIO_voidWriteData(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Character >> 2) & 1);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	461a      	mov	r2, r3
 8001040:	2101      	movs	r1, #1
 8001042:	2000      	movs	r0, #0
 8001044:	f000 faf6 	bl	8001634 <MGPIO_voidWriteData>
				       MGPIO_voidWriteData(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Character >> 3) & 1);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	08db      	lsrs	r3, r3, #3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	2100      	movs	r1, #0
 8001058:	2000      	movs	r0, #0
 800105a:	f000 faeb 	bl	8001634 <MGPIO_voidWriteData>
				       
				       
				       //     	 DIO_enuSetPortValue(DIO_u8_PORTC, Copy_u8Character);
				       // Enable //
				         LCD_vidSendEnable();	
 800105e:	f7ff ff5d 	bl	8000f1c <LCD_vidSendEnable>
						 Systic_vDelay_ms(12);
 8001062:	200c      	movs	r0, #12
 8001064:	f000 fe54 	bl	8001d10 <Systic_vDelay_ms>
						
	#endif					  
						 
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <LCD_enuSendInstruction>:
 * Description: send instruction to LCD Microcontroller
 * Argument: Copy_u8Instruction   (The Desired Instruction to be Executed)
 * Return: Error Status >>>>> LCD_OK , LCD_NOK
 * */
LCD_enutErrorStatus LCD_enuSendInstruction(u8 Copy_u8Instruction)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
			  Systic_vDelay_ms(4);
		#elif defined four_bit_mode	  
		
 // *************************** SENDING THE THE HIGH NIBBLE FIRST ********************************//////	 
			  /* Rs pin ----> low */
			  MGPIO_voidWriteData(LCD_u8_RS_PORT,LCD_u8_RS_PIN,LOW);
 800107e:	2200      	movs	r2, #0
 8001080:	2107      	movs	r1, #7
 8001082:	2000      	movs	r0, #0
 8001084:	f000 fad6 	bl	8001634 <MGPIO_voidWriteData>

			  /* RW pin ----> low */
			  MGPIO_voidWriteData(LCD_u8_RW_PORT, LCD_u8_RW_PIN, LOW);
 8001088:	2200      	movs	r2, #0
 800108a:	2109      	movs	r1, #9
 800108c:	2001      	movs	r0, #1
 800108e:	f000 fad1 	bl	8001634 <MGPIO_voidWriteData>

			  MGPIO_voidWriteData(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Instruction >> 4) & 1);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	461a      	mov	r2, r3
 80010a0:	2103      	movs	r1, #3
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 fac6 	bl	8001634 <MGPIO_voidWriteData>
			  MGPIO_voidWriteData(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Instruction >> 5) & 1);
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	2102      	movs	r1, #2
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 fabb 	bl	8001634 <MGPIO_voidWriteData>
			  MGPIO_voidWriteData(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Instruction >> 6) & 1);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	099b      	lsrs	r3, r3, #6
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	461a      	mov	r2, r3
 80010cc:	2101      	movs	r1, #1
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 fab0 	bl	8001634 <MGPIO_voidWriteData>
			  MGPIO_voidWriteData(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Instruction >> 7) & 1);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	09db      	lsrs	r3, r3, #7
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	2100      	movs	r1, #0
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 faa8 	bl	8001634 <MGPIO_voidWriteData>

			  // Enable //
			  LCD_vidSendEnable();
 80010e4:	f7ff ff1a 	bl	8000f1c <LCD_vidSendEnable>
			  
    // *************************** SENDING THE THE lOW NIBBLE FIRST ********************************//////	 
			  	  /* Rs pin ----> low */
			     MGPIO_voidWriteData(LCD_u8_RS_PORT,LCD_u8_RS_PIN,LOW);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2107      	movs	r1, #7
 80010ec:	2000      	movs	r0, #0
 80010ee:	f000 faa1 	bl	8001634 <MGPIO_voidWriteData>

			  	  /* RW pin ----> low */
			     MGPIO_voidWriteData(LCD_u8_RW_PORT, LCD_u8_RW_PIN,LOW);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2109      	movs	r1, #9
 80010f6:	2001      	movs	r0, #1
 80010f8:	f000 fa9c 	bl	8001634 <MGPIO_voidWriteData>

			  	  // Send instructions //
			  	 MGPIO_voidWriteData(LCD_u8_D4_PORT, LCD_u8_D4_PIN, (Copy_u8Instruction >> 0) & 1);
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	2103      	movs	r1, #3
 8001108:	2000      	movs	r0, #0
 800110a:	f000 fa93 	bl	8001634 <MGPIO_voidWriteData>
			  	 MGPIO_voidWriteData(LCD_u8_D5_PORT, LCD_u8_D5_PIN, (Copy_u8Instruction >> 1) & 1);
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	085b      	lsrs	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	2102      	movs	r1, #2
 800111e:	2000      	movs	r0, #0
 8001120:	f000 fa88 	bl	8001634 <MGPIO_voidWriteData>
			  	 MGPIO_voidWriteData(LCD_u8_D6_PORT, LCD_u8_D6_PIN, (Copy_u8Instruction >> 2) & 1);
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	2101      	movs	r1, #1
 8001134:	2000      	movs	r0, #0
 8001136:	f000 fa7d 	bl	8001634 <MGPIO_voidWriteData>
			  	 MGPIO_voidWriteData(LCD_u8_D7_PORT, LCD_u8_D7_PIN, (Copy_u8Instruction >> 3) & 1);
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	2100      	movs	r1, #0
 800114a:	2000      	movs	r0, #0
 800114c:	f000 fa72 	bl	8001634 <MGPIO_voidWriteData>

			  	  // Enable //
			  	  LCD_vidSendEnable();
 8001150:	f7ff fee4 	bl	8000f1c <LCD_vidSendEnable>
				 Systic_vDelay_ms(12);
 8001154:	200c      	movs	r0, #12
 8001156:	f000 fddb 	bl	8001d10 <Systic_vDelay_ms>
	  }

#endif
     return Local_enuErrorStatus;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <LCD_enuGoTo>:



LCD_enutErrorStatus LCD_enuGoTo(u8 Copy_u8Row , u8 Copy_u8Col)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	460a      	mov	r2, r1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	4613      	mov	r3, r2
 8001172:	71bb      	strb	r3, [r7, #6]
	LCD_enutErrorStatus  Local_enuErrorStatus = LCD_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]

	 if(Copy_u8Row >LCD_u8_ROW1 ||  Copy_u8Col>LCD_u8_COL15)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d802      	bhi.n	8001184 <LCD_enuGoTo+0x20>
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d902      	bls.n	800118a <LCD_enuGoTo+0x26>
	 {
		 Local_enuErrorStatus = LCD_NOK;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e013      	b.n	80011b2 <LCD_enuGoTo+0x4e>
	 }
	 else
	 {
		 switch (Copy_u8Row)
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d002      	beq.n	8001196 <LCD_enuGoTo+0x32>
 8001190:	2b01      	cmp	r3, #1
 8001192:	d007      	beq.n	80011a4 <LCD_enuGoTo+0x40>
 8001194:	e00d      	b.n	80011b2 <LCD_enuGoTo+0x4e>
		 {
		     case LCD_u8_ROW0:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + Copy_u8Col);
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	3b80      	subs	r3, #128	; 0x80
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff67 	bl	8001070 <LCD_enuSendInstruction>
		    	                    break;
 80011a2:	e006      	b.n	80011b2 <LCD_enuGoTo+0x4e>
		     case LCD_u8_ROW1:
		    	                  LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + (Copy_u8Col+0x40));
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	3b40      	subs	r3, #64	; 0x40
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff60 	bl	8001070 <LCD_enuSendInstruction>
		    	                    break;
 80011b0:	bf00      	nop
		 }

	 }
    return Local_enuErrorStatus;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <LCD_enuSendString>:


LCD_enutErrorStatus	LCD_enuSendString(u8* Add_pu8String)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	LCD_enutErrorStatus Local_enuErrorStatus = LCD_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]

		if(Add_pu8String == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10a      	bne.n	80011e4 <LCD_enuSendString+0x28>
		{
			Local_enuErrorStatus = LCD_NOK;
 80011ce:	2301      	movs	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	e00b      	b.n	80011ec <LCD_enuSendString+0x30>
		}
		else
		{
                  while(*Add_pu8String!='\0')
                     {
                	  LCD_enuSendCharacter(*Add_pu8String);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fed2 	bl	8000f82 <LCD_enuSendCharacter>
                    	   Add_pu8String++;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3301      	adds	r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
                  while(*Add_pu8String!='\0')
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f3      	bne.n	80011d4 <LCD_enuSendString+0x18>
                    }
		}
		return Local_enuErrorStatus;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <LCD_enuSendNumber>:




void LCD_enuSendNumber(u32 Copy_u32Number)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

    u8 Local_u8Reminder=0;
 8001200:	2300      	movs	r3, #0
 8001202:	777b      	strb	r3, [r7, #29]
    u8 LCD_au8Reminder[15];
    u8 Local_u8Index=0;
 8001204:	2300      	movs	r3, #0
 8001206:	77fb      	strb	r3, [r7, #31]
	s8 Local_s8Iterator;
	if(Copy_u32Number == 0)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d11e      	bne.n	800124c <LCD_enuSendNumber+0x54>
	{
		LCD_enuSendCharacter('0');
 800120e:	2030      	movs	r0, #48	; 0x30
 8001210:	f7ff feb7 	bl	8000f82 <LCD_enuSendCharacter>
          
          for (Local_s8Iterator=Local_u8Index-1 ; Local_s8Iterator>=0; --Local_s8Iterator)
                 LCD_enuSendCharacter(LCD_au8Reminder[Local_s8Iterator]+48);
	}		  

}
 8001214:	e035      	b.n	8001282 <LCD_enuSendNumber+0x8a>
	          Local_u8Reminder=Copy_u32Number%10;   //    1
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <LCD_enuSendNumber+0x94>)
 800121a:	fba3 2301 	umull	r2, r3, r3, r1
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	4613      	mov	r3, r2
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4413      	add	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	1aca      	subs	r2, r1, r3
 800122a:	4613      	mov	r3, r2
 800122c:	777b      	strb	r3, [r7, #29]
	          Copy_u32Number=Copy_u32Number/10;   //1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a16      	ldr	r2, [pc, #88]	; (800128c <LCD_enuSendNumber+0x94>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	607b      	str	r3, [r7, #4]
	          LCD_au8Reminder[Local_u8Index]=Local_u8Reminder;
 800123a:	7ffb      	ldrb	r3, [r7, #31]
 800123c:	3320      	adds	r3, #32
 800123e:	443b      	add	r3, r7
 8001240:	7f7a      	ldrb	r2, [r7, #29]
 8001242:	f803 2c14 	strb.w	r2, [r3, #-20]
	          Local_u8Index++;
 8001246:	7ffb      	ldrb	r3, [r7, #31]
 8001248:	3301      	adds	r3, #1
 800124a:	77fb      	strb	r3, [r7, #31]
          while(Copy_u32Number!=0)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1e1      	bne.n	8001216 <LCD_enuSendNumber+0x1e>
          for (Local_s8Iterator=Local_u8Index-1 ; Local_s8Iterator>=0; --Local_s8Iterator)
 8001252:	7ffb      	ldrb	r3, [r7, #31]
 8001254:	3b01      	subs	r3, #1
 8001256:	b2db      	uxtb	r3, r3
 8001258:	77bb      	strb	r3, [r7, #30]
 800125a:	e00e      	b.n	800127a <LCD_enuSendNumber+0x82>
                 LCD_enuSendCharacter(LCD_au8Reminder[Local_s8Iterator]+48);
 800125c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001260:	3320      	adds	r3, #32
 8001262:	443b      	add	r3, r7
 8001264:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001268:	3330      	adds	r3, #48	; 0x30
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fe88 	bl	8000f82 <LCD_enuSendCharacter>
          for (Local_s8Iterator=Local_u8Index-1 ; Local_s8Iterator>=0; --Local_s8Iterator)
 8001272:	7fbb      	ldrb	r3, [r7, #30]
 8001274:	3b01      	subs	r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	77bb      	strb	r3, [r7, #30]
 800127a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800127e:	2b00      	cmp	r3, #0
 8001280:	daec      	bge.n	800125c <LCD_enuSendNumber+0x64>
}
 8001282:	bf00      	nop
 8001284:	3720      	adds	r7, #32
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	cccccccd 	.word	0xcccccccd

08001290 <LDR_u32_Get_value>:
{
	ADC_voidInit();
}

u16 LDR_u32_Get_value(u16 copy_channel)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
	u16 Local_u32ReadValue;
	Local_u32ReadValue = ADC_u16Read( copy_channel);
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 f851 	bl	8001344 <ADC_u16Read>
 80012a2:	4603      	mov	r3, r0
 80012a4:	81fb      	strh	r3, [r7, #14]
	 *  1365 --> Light
	 * */
//	Local_u16ReadValue = (Local_u16ReadValue * 5000ul)/4096;
//	Local_u16ReadValue = (1-(Local_u16ReadValue/(4.99*1000ul)))*100;
	//Local_u32ReadValue =( ((Local_u32ReadValue - 1365) * 100) / 2726 ); // 272 600
    return Local_u32ReadValue;
 80012a6:	89fb      	ldrh	r3, [r7, #14]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <LM35_vidInit>:
#include "LM35_interface.h"
#include "LM35_config.h"
#include "LM35_private.h"

void LM35_vidInit()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
    ADC_voidInit();
 80012b4:	f000 f822 	bl	80012fc <ADC_voidInit>
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}

080012bc <LM35_u16_Get_Temp>:

u16 LM35_u16_Get_Temp(u16 copy_channel)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]

    u16 temp;
    u16 Local_u16ReadValue;
    /* Return Digital value8*/
    Local_u16ReadValue = ADC_u16Read( copy_channel);
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f83b 	bl	8001344 <ADC_u16Read>
 80012ce:	4603      	mov	r3, r0
 80012d0:	81fb      	strh	r3, [r7, #14]
Analog value = Analog value / 1000
1c ---> 10mv
??  ----- analog value in mv
temp = anaglo value in mv / 10 mv
*/
Local_u16ReadValue = (Local_u16ReadValue * 5000UL)/4096 ;
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d8:	fb02 f303 	mul.w	r3, r2, r3
 80012dc:	0b1b      	lsrs	r3, r3, #12
 80012de:	81fb      	strh	r3, [r7, #14]
temp = Local_u16ReadValue / 10;
 80012e0:	89fb      	ldrh	r3, [r7, #14]
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <LM35_u16_Get_Temp+0x3c>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	08db      	lsrs	r3, r3, #3
 80012ea:	81bb      	strh	r3, [r7, #12]
return temp;
 80012ec:	89bb      	ldrh	r3, [r7, #12]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	cccccccd 	.word	0xcccccccd

080012fc <ADC_voidInit>:
#include"ADC_interface.h"



void ADC_voidInit()
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
    #if RESOLUTION == _12_BIT
        CLEAR_BIT(ADC->CR1,RES0);
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <ADC_voidInit+0x40>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <ADC_voidInit+0x40>)
 8001306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800130a:	6053      	str	r3, [r2, #4]
        CLEAR_BIT(ADC->CR1,RES1);
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <ADC_voidInit+0x40>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <ADC_voidInit+0x40>)
 8001312:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001316:	6053      	str	r3, [r2, #4]
    #elif RESOLUTION == _8_BIT
        SET_BIT(ADC->CR1,RES0);
        SET_BIT(ADC->CR1,RES1);
#endif

SET_BIT(ADC_CCR,23);//VREFINT enable
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <ADC_voidInit+0x44>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <ADC_voidInit+0x44>)
 800131e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001322:	6013      	str	r3, [r2, #0]
SET_BIT(ADC->CR2,ADON);//ENABLE ADC
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <ADC_voidInit+0x40>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <ADC_voidInit+0x40>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6093      	str	r3, [r2, #8]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40012000 	.word	0x40012000
 8001340:	40012304 	.word	0x40012304

08001344 <ADC_u16Read>:


u16 ADC_u16Read(u16 copy_channel)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
    ADC->SQR3=0x00000000; // WRITE 0 TO PREVENT CONFLICT
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <ADC_u16Read+0x44>)
 8001350:	2200      	movs	r2, #0
 8001352:	635a      	str	r2, [r3, #52]	; 0x34
    ADC->SQR3=copy_channel;
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <ADC_u16Read+0x44>)
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	6353      	str	r3, [r2, #52]	; 0x34

    SET_BIT(ADC->CR2,SWSTART);//START CONVERSION
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <ADC_u16Read+0x44>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <ADC_u16Read+0x44>)
 8001360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001364:	6093      	str	r3, [r2, #8]
    while(!GET_BIT(ADC->SR,EOC));
 8001366:	bf00      	nop
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <ADC_u16Read+0x44>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f9      	beq.n	8001368 <ADC_u16Read+0x24>
    return ADC->DR;
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <ADC_u16Read+0x44>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	b29b      	uxth	r3, r3

}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40012000 	.word	0x40012000

0800138c <MGPIO_voidSetPinMode>:
/*      4- MODE_ANALOG                                                                                 */
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8Mod                         */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinMode(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Mode  ){
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	460b      	mov	r3, r1
 8001398:	71bb      	strb	r3, [r7, #6]
 800139a:	4613      	mov	r3, r2
 800139c:	717b      	strb	r3, [r7, #5]
	
	switch(Copy_u8PortName)
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	d857      	bhi.n	8001454 <MGPIO_voidSetPinMode+0xc8>
 80013a4:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <MGPIO_voidSetPinMode+0x20>)
 80013a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013aa:	bf00      	nop
 80013ac:	080013c5 	.word	0x080013c5
 80013b0:	080013dd 	.word	0x080013dd
 80013b4:	080013f5 	.word	0x080013f5
 80013b8:	0800140d 	.word	0x0800140d
 80013bc:	08001425 	.word	0x08001425
 80013c0:	0800143d 	.word	0x0800143d
	{
	  case _GPIOA_PORT : MGPIOA->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <MGPIO_voidSetPinMode+0xd8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	7979      	ldrb	r1, [r7, #5]
 80013ca:	79ba      	ldrb	r2, [r7, #6]
 80013cc:	0052      	lsls	r2, r2, #1
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	4611      	mov	r1, r2
 80013d4:	4a23      	ldr	r2, [pc, #140]	; (8001464 <MGPIO_voidSetPinMode+0xd8>)
 80013d6:	430b      	orrs	r3, r1
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e03c      	b.n	8001456 <MGPIO_voidSetPinMode+0xca>
	  case _GPIOB_PORT : MGPIOB->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MGPIO_voidSetPinMode+0xdc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	7979      	ldrb	r1, [r7, #5]
 80013e2:	79ba      	ldrb	r2, [r7, #6]
 80013e4:	0052      	lsls	r2, r2, #1
 80013e6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ea:	4611      	mov	r1, r2
 80013ec:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <MGPIO_voidSetPinMode+0xdc>)
 80013ee:	430b      	orrs	r3, r1
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e030      	b.n	8001456 <MGPIO_voidSetPinMode+0xca>
	  case _GPIOC_PORT : MGPIOC->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MGPIO_voidSetPinMode+0xe0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	7979      	ldrb	r1, [r7, #5]
 80013fa:	79ba      	ldrb	r2, [r7, #6]
 80013fc:	0052      	lsls	r2, r2, #1
 80013fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001402:	4611      	mov	r1, r2
 8001404:	4a19      	ldr	r2, [pc, #100]	; (800146c <MGPIO_voidSetPinMode+0xe0>)
 8001406:	430b      	orrs	r3, r1
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e024      	b.n	8001456 <MGPIO_voidSetPinMode+0xca>
	  case _GPIOD_PORT : MGPIOD->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MGPIO_voidSetPinMode+0xe4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	7979      	ldrb	r1, [r7, #5]
 8001412:	79ba      	ldrb	r2, [r7, #6]
 8001414:	0052      	lsls	r2, r2, #1
 8001416:	fa01 f202 	lsl.w	r2, r1, r2
 800141a:	4611      	mov	r1, r2
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <MGPIO_voidSetPinMode+0xe4>)
 800141e:	430b      	orrs	r3, r1
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e018      	b.n	8001456 <MGPIO_voidSetPinMode+0xca>
	  case _GPIOE_PORT : MGPIOE->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MGPIO_voidSetPinMode+0xe8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	7979      	ldrb	r1, [r7, #5]
 800142a:	79ba      	ldrb	r2, [r7, #6]
 800142c:	0052      	lsls	r2, r2, #1
 800142e:	fa01 f202 	lsl.w	r2, r1, r2
 8001432:	4611      	mov	r1, r2
 8001434:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <MGPIO_voidSetPinMode+0xe8>)
 8001436:	430b      	orrs	r3, r1
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e00c      	b.n	8001456 <MGPIO_voidSetPinMode+0xca>
	  case _GPIOH_PORT : MGPIOH->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MGPIO_voidSetPinMode+0xec>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	7979      	ldrb	r1, [r7, #5]
 8001442:	79ba      	ldrb	r2, [r7, #6]
 8001444:	0052      	lsls	r2, r2, #1
 8001446:	fa01 f202 	lsl.w	r2, r1, r2
 800144a:	4611      	mov	r1, r2
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <MGPIO_voidSetPinMode+0xec>)
 800144e:	430b      	orrs	r3, r1
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e000      	b.n	8001456 <MGPIO_voidSetPinMode+0xca>
	  default : /*ERROR*/ break ;
 8001454:	bf00      	nop
    }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00
 8001474:	40021000 	.word	0x40021000
 8001478:	40021c00 	.word	0x40021c00

0800147c <MGPIO_voidSetPullType>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8PullType                    */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPullType(u8 Copy_u8PortName ,u32 Copy_u8PinNum ,u32 Copy_u8PullType )
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	73fb      	strb	r3, [r7, #15]
	
		switch(Copy_u8PortName)
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	2b05      	cmp	r3, #5
 800148e:	d851      	bhi.n	8001534 <MGPIO_voidSetPullType+0xb8>
 8001490:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <MGPIO_voidSetPullType+0x1c>)
 8001492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001496:	bf00      	nop
 8001498:	080014b1 	.word	0x080014b1
 800149c:	080014c7 	.word	0x080014c7
 80014a0:	080014dd 	.word	0x080014dd
 80014a4:	080014f3 	.word	0x080014f3
 80014a8:	08001509 	.word	0x08001509
 80014ac:	0800151f 	.word	0x0800151f
	{
	  case _GPIOA_PORT : MGPIOA->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <MGPIO_voidSetPullType+0xc8>)
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	4921      	ldr	r1, [pc, #132]	; (8001544 <MGPIO_voidSetPullType+0xc8>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60cb      	str	r3, [r1, #12]
 80014c4:	e037      	b.n	8001536 <MGPIO_voidSetPullType+0xba>
	  case _GPIOB_PORT : MGPIOB->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <MGPIO_voidSetPullType+0xcc>)
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	491c      	ldr	r1, [pc, #112]	; (8001548 <MGPIO_voidSetPullType+0xcc>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60cb      	str	r3, [r1, #12]
 80014da:	e02c      	b.n	8001536 <MGPIO_voidSetPullType+0xba>
	  case _GPIOC_PORT : MGPIOC->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <MGPIO_voidSetPullType+0xd0>)
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	4918      	ldr	r1, [pc, #96]	; (800154c <MGPIO_voidSetPullType+0xd0>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	60cb      	str	r3, [r1, #12]
 80014f0:	e021      	b.n	8001536 <MGPIO_voidSetPullType+0xba>
	  case _GPIOD_PORT : MGPIOD->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <MGPIO_voidSetPullType+0xd4>)
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001500:	4913      	ldr	r1, [pc, #76]	; (8001550 <MGPIO_voidSetPullType+0xd4>)
 8001502:	4313      	orrs	r3, r2
 8001504:	60cb      	str	r3, [r1, #12]
 8001506:	e016      	b.n	8001536 <MGPIO_voidSetPullType+0xba>
	  case _GPIOE_PORT : MGPIOE->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <MGPIO_voidSetPullType+0xd8>)
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	490f      	ldr	r1, [pc, #60]	; (8001554 <MGPIO_voidSetPullType+0xd8>)
 8001518:	4313      	orrs	r3, r2
 800151a:	60cb      	str	r3, [r1, #12]
 800151c:	e00b      	b.n	8001536 <MGPIO_voidSetPullType+0xba>
	  case _GPIOH_PORT : MGPIOH->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MGPIO_voidSetPullType+0xdc>)
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	490a      	ldr	r1, [pc, #40]	; (8001558 <MGPIO_voidSetPullType+0xdc>)
 800152e:	4313      	orrs	r3, r2
 8001530:	60cb      	str	r3, [r1, #12]
 8001532:	e000      	b.n	8001536 <MGPIO_voidSetPullType+0xba>
	  default : /*ERROR*/ break ;
 8001534:	bf00      	nop
	}
	
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40020000 	.word	0x40020000
 8001548:	40020400 	.word	0x40020400
 800154c:	40020800 	.word	0x40020800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40021000 	.word	0x40021000
 8001558:	40021c00 	.word	0x40021c00

0800155c <MGPIO_u8ReadData>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum                                        */                   
/* 3- Function Return      -> LOC_u8ReturnValue                                                        */
/*******************************************************************************************************/

u8 MGPIO_u8ReadData(u8 Copy_u8PORT ,u8 Copy_u8PIN)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	460a      	mov	r2, r1
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	4613      	mov	r3, r2
 800156a:	71bb      	strb	r3, [r7, #6]
	u8 L_u8Data = 0 ;
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]
	switch(Copy_u8PORT)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d84a      	bhi.n	800160c <MGPIO_u8ReadData+0xb0>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <MGPIO_u8ReadData+0x20>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	08001595 	.word	0x08001595
 8001580:	080015a9 	.word	0x080015a9
 8001584:	080015bd 	.word	0x080015bd
 8001588:	080015d1 	.word	0x080015d1
 800158c:	080015e5 	.word	0x080015e5
 8001590:	080015f9 	.word	0x080015f9
	{ 
	  case _GPIOA_PORT :L_u8Data= GET_BIT(MGPIOA->IDR,Copy_u8PIN ) ; break;
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <MGPIO_u8ReadData+0xc0>)
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	79bb      	ldrb	r3, [r7, #6]
 800159a:	fa22 f303 	lsr.w	r3, r2, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e032      	b.n	800160e <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOB_PORT :L_u8Data= GET_BIT(MGPIOB->IDR,Copy_u8PIN ) ; break;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <MGPIO_u8ReadData+0xc4>)
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	79bb      	ldrb	r3, [r7, #6]
 80015ae:	fa22 f303 	lsr.w	r3, r2, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	e028      	b.n	800160e <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOC_PORT :L_u8Data= GET_BIT(MGPIOC->IDR,Copy_u8PIN ) ; break;
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MGPIO_u8ReadData+0xc8>)
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	fa22 f303 	lsr.w	r3, r2, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	73fb      	strb	r3, [r7, #15]
 80015ce:	e01e      	b.n	800160e <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOD_PORT :L_u8Data= GET_BIT(MGPIOD->IDR,Copy_u8PIN) ; break;
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MGPIO_u8ReadData+0xcc>)
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	fa22 f303 	lsr.w	r3, r2, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
 80015e2:	e014      	b.n	800160e <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOE_PORT :L_u8Data= GET_BIT(MGPIOE->IDR,Copy_u8PIN) ; break;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <MGPIO_u8ReadData+0xd0>)
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	fa22 f303 	lsr.w	r3, r2, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	e00a      	b.n	800160e <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOH_PORT :L_u8Data= GET_BIT(MGPIOH->IDR,Copy_u8PIN) ; break;
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <MGPIO_u8ReadData+0xd4>)
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	79bb      	ldrb	r3, [r7, #6]
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e000      	b.n	800160e <MGPIO_u8ReadData+0xb2>
	  default : /*ERROR*/ break ;
 800160c:	bf00      	nop
		
	}
	return L_u8Data;
 800160e:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40020000 	.word	0x40020000
 8001620:	40020400 	.word	0x40020400
 8001624:	40020800 	.word	0x40020800
 8001628:	40020c00 	.word	0x40020c00
 800162c:	40021000 	.word	0x40021000
 8001630:	40021c00 	.word	0x40021c00

08001634 <MGPIO_voidWriteData>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8State                       */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidWriteData(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8State)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
 800163e:	460b      	mov	r3, r1
 8001640:	71bb      	strb	r3, [r7, #6]
 8001642:	4613      	mov	r3, r2
 8001644:	717b      	strb	r3, [r7, #5]
	if(Copy_u8State==HIGH)
 8001646:	797b      	ldrb	r3, [r7, #5]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d155      	bne.n	80016f8 <MGPIO_voidWriteData+0xc4>
	{
		switch(Copy_u8PortName)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b05      	cmp	r3, #5
 8001650:	f200 80ac 	bhi.w	80017ac <MGPIO_voidWriteData+0x178>
 8001654:	a201      	add	r2, pc, #4	; (adr r2, 800165c <MGPIO_voidWriteData+0x28>)
 8001656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165a:	bf00      	nop
 800165c:	08001675 	.word	0x08001675
 8001660:	0800168b 	.word	0x0800168b
 8001664:	080016a1 	.word	0x080016a1
 8001668:	080016b7 	.word	0x080016b7
 800166c:	080016cd 	.word	0x080016cd
 8001670:	080016e3 	.word	0x080016e3
		{
		case _GPIOA_PORT :  SET_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 8001674:	4b52      	ldr	r3, [pc, #328]	; (80017c0 <MGPIO_voidWriteData+0x18c>)
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	79ba      	ldrb	r2, [r7, #6]
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	4611      	mov	r1, r2
 8001682:	4a4f      	ldr	r2, [pc, #316]	; (80017c0 <MGPIO_voidWriteData+0x18c>)
 8001684:	430b      	orrs	r3, r1
 8001686:	6153      	str	r3, [r2, #20]
 8001688:	e093      	b.n	80017b2 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOB_PORT :  SET_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 800168a:	4b4e      	ldr	r3, [pc, #312]	; (80017c4 <MGPIO_voidWriteData+0x190>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	79ba      	ldrb	r2, [r7, #6]
 8001690:	2101      	movs	r1, #1
 8001692:	fa01 f202 	lsl.w	r2, r1, r2
 8001696:	4611      	mov	r1, r2
 8001698:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <MGPIO_voidWriteData+0x190>)
 800169a:	430b      	orrs	r3, r1
 800169c:	6153      	str	r3, [r2, #20]
 800169e:	e088      	b.n	80017b2 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOC_PORT :  SET_BIT(GPIOC_ODR,Copy_u8PinNum); break;
 80016a0:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <MGPIO_voidWriteData+0x194>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	79ba      	ldrb	r2, [r7, #6]
 80016a6:	2101      	movs	r1, #1
 80016a8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ac:	4611      	mov	r1, r2
 80016ae:	4a46      	ldr	r2, [pc, #280]	; (80017c8 <MGPIO_voidWriteData+0x194>)
 80016b0:	430b      	orrs	r3, r1
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	e07d      	b.n	80017b2 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOD_PORT :  SET_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 80016b6:	4b45      	ldr	r3, [pc, #276]	; (80017cc <MGPIO_voidWriteData+0x198>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	79ba      	ldrb	r2, [r7, #6]
 80016bc:	2101      	movs	r1, #1
 80016be:	fa01 f202 	lsl.w	r2, r1, r2
 80016c2:	4611      	mov	r1, r2
 80016c4:	4a41      	ldr	r2, [pc, #260]	; (80017cc <MGPIO_voidWriteData+0x198>)
 80016c6:	430b      	orrs	r3, r1
 80016c8:	6153      	str	r3, [r2, #20]
 80016ca:	e072      	b.n	80017b2 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOE_PORT :  SET_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 80016cc:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <MGPIO_voidWriteData+0x19c>)
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	79ba      	ldrb	r2, [r7, #6]
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f202 	lsl.w	r2, r1, r2
 80016d8:	4611      	mov	r1, r2
 80016da:	4a3d      	ldr	r2, [pc, #244]	; (80017d0 <MGPIO_voidWriteData+0x19c>)
 80016dc:	430b      	orrs	r3, r1
 80016de:	6153      	str	r3, [r2, #20]
 80016e0:	e067      	b.n	80017b2 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOH_PORT :  SET_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 80016e2:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <MGPIO_voidWriteData+0x1a0>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	79ba      	ldrb	r2, [r7, #6]
 80016e8:	2101      	movs	r1, #1
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	4611      	mov	r1, r2
 80016f0:	4a38      	ldr	r2, [pc, #224]	; (80017d4 <MGPIO_voidWriteData+0x1a0>)
 80016f2:	430b      	orrs	r3, r1
 80016f4:	6153      	str	r3, [r2, #20]
 80016f6:	e05c      	b.n	80017b2 <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
		}
		
	}
	else{
		switch(Copy_u8PortName)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b05      	cmp	r3, #5
 80016fc:	d858      	bhi.n	80017b0 <MGPIO_voidWriteData+0x17c>
 80016fe:	a201      	add	r2, pc, #4	; (adr r2, 8001704 <MGPIO_voidWriteData+0xd0>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	0800171d 	.word	0x0800171d
 8001708:	08001735 	.word	0x08001735
 800170c:	0800174d 	.word	0x0800174d
 8001710:	08001765 	.word	0x08001765
 8001714:	0800177d 	.word	0x0800177d
 8001718:	08001795 	.word	0x08001795
		{
		case _GPIOA_PORT :  CLEAR_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <MGPIO_voidWriteData+0x18c>)
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	79ba      	ldrb	r2, [r7, #6]
 8001722:	2101      	movs	r1, #1
 8001724:	fa01 f202 	lsl.w	r2, r1, r2
 8001728:	43d2      	mvns	r2, r2
 800172a:	4611      	mov	r1, r2
 800172c:	4a24      	ldr	r2, [pc, #144]	; (80017c0 <MGPIO_voidWriteData+0x18c>)
 800172e:	400b      	ands	r3, r1
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	e03e      	b.n	80017b2 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOB_PORT :  CLEAR_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 8001734:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <MGPIO_voidWriteData+0x190>)
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	79ba      	ldrb	r2, [r7, #6]
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f202 	lsl.w	r2, r1, r2
 8001740:	43d2      	mvns	r2, r2
 8001742:	4611      	mov	r1, r2
 8001744:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <MGPIO_voidWriteData+0x190>)
 8001746:	400b      	ands	r3, r1
 8001748:	6153      	str	r3, [r2, #20]
 800174a:	e032      	b.n	80017b2 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOC_PORT :  CLEAR_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <MGPIO_voidWriteData+0x1a4>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	79ba      	ldrb	r2, [r7, #6]
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f202 	lsl.w	r2, r1, r2
 8001758:	43d2      	mvns	r2, r2
 800175a:	4611      	mov	r1, r2
 800175c:	4a1e      	ldr	r2, [pc, #120]	; (80017d8 <MGPIO_voidWriteData+0x1a4>)
 800175e:	400b      	ands	r3, r1
 8001760:	6153      	str	r3, [r2, #20]
 8001762:	e026      	b.n	80017b2 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOD_PORT :  CLEAR_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <MGPIO_voidWriteData+0x198>)
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	79ba      	ldrb	r2, [r7, #6]
 800176a:	2101      	movs	r1, #1
 800176c:	fa01 f202 	lsl.w	r2, r1, r2
 8001770:	43d2      	mvns	r2, r2
 8001772:	4611      	mov	r1, r2
 8001774:	4a15      	ldr	r2, [pc, #84]	; (80017cc <MGPIO_voidWriteData+0x198>)
 8001776:	400b      	ands	r3, r1
 8001778:	6153      	str	r3, [r2, #20]
 800177a:	e01a      	b.n	80017b2 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOE_PORT :  CLEAR_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <MGPIO_voidWriteData+0x19c>)
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	79ba      	ldrb	r2, [r7, #6]
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	43d2      	mvns	r2, r2
 800178a:	4611      	mov	r1, r2
 800178c:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <MGPIO_voidWriteData+0x19c>)
 800178e:	400b      	ands	r3, r1
 8001790:	6153      	str	r3, [r2, #20]
 8001792:	e00e      	b.n	80017b2 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOH_PORT :  CLEAR_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MGPIO_voidWriteData+0x1a0>)
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	79ba      	ldrb	r2, [r7, #6]
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	43d2      	mvns	r2, r2
 80017a2:	4611      	mov	r1, r2
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <MGPIO_voidWriteData+0x1a0>)
 80017a6:	400b      	ands	r3, r1
 80017a8:	6153      	str	r3, [r2, #20]
 80017aa:	e002      	b.n	80017b2 <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
 80017ac:	bf00      	nop
 80017ae:	e000      	b.n	80017b2 <MGPIO_voidWriteData+0x17e>
		
		default : /*ERROR*/ break ;
 80017b0:	bf00      	nop
		}
	}
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020814 	.word	0x40020814
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40021c00 	.word	0x40021c00
 80017d8:	40020800 	.word	0x40020800

080017dc <MGPIO_voidSetPinAltFn>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum  ,Copy_u8ALF                           */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinAltFn( u8 Copy_u8PortNum ,u8 Copy_u8PinNum, u8 Copy_u8ALF )
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	460b      	mov	r3, r1
 80017e8:	71bb      	strb	r3, [r7, #6]
 80017ea:	4613      	mov	r3, r2
 80017ec:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinNum <=7U)
 80017ee:	79bb      	ldrb	r3, [r7, #6]
 80017f0:	2b07      	cmp	r3, #7
 80017f2:	d85b      	bhi.n	80018ac <MGPIO_voidSetPinAltFn+0xd0>
	{
		switch(Copy_u8PortNum )
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	f200 80be 	bhi.w	8001978 <MGPIO_voidSetPinAltFn+0x19c>
 80017fc:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <MGPIO_voidSetPinAltFn+0x28>)
 80017fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001802:	bf00      	nop
 8001804:	0800181d 	.word	0x0800181d
 8001808:	08001835 	.word	0x08001835
 800180c:	0800184d 	.word	0x0800184d
 8001810:	08001865 	.word	0x08001865
 8001814:	0800187d 	.word	0x0800187d
 8001818:	08001895 	.word	0x08001895
		{
			 case _GPIOA_PORT  : MGPIOA->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 800181c:	4b5b      	ldr	r3, [pc, #364]	; (800198c <MGPIO_voidSetPinAltFn+0x1b0>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	7979      	ldrb	r1, [r7, #5]
 8001822:	79ba      	ldrb	r2, [r7, #6]
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	4611      	mov	r1, r2
 800182c:	4a57      	ldr	r2, [pc, #348]	; (800198c <MGPIO_voidSetPinAltFn+0x1b0>)
 800182e:	430b      	orrs	r3, r1
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	e0a4      	b.n	800197e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOB_PORT  : MGPIOB->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001834:	4b56      	ldr	r3, [pc, #344]	; (8001990 <MGPIO_voidSetPinAltFn+0x1b4>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	7979      	ldrb	r1, [r7, #5]
 800183a:	79ba      	ldrb	r2, [r7, #6]
 800183c:	0092      	lsls	r2, r2, #2
 800183e:	fa01 f202 	lsl.w	r2, r1, r2
 8001842:	4611      	mov	r1, r2
 8001844:	4a52      	ldr	r2, [pc, #328]	; (8001990 <MGPIO_voidSetPinAltFn+0x1b4>)
 8001846:	430b      	orrs	r3, r1
 8001848:	6213      	str	r3, [r2, #32]
 800184a:	e098      	b.n	800197e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOC_PORT  : MGPIOC->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 800184c:	4b51      	ldr	r3, [pc, #324]	; (8001994 <MGPIO_voidSetPinAltFn+0x1b8>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	7979      	ldrb	r1, [r7, #5]
 8001852:	79ba      	ldrb	r2, [r7, #6]
 8001854:	0092      	lsls	r2, r2, #2
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	4611      	mov	r1, r2
 800185c:	4a4d      	ldr	r2, [pc, #308]	; (8001994 <MGPIO_voidSetPinAltFn+0x1b8>)
 800185e:	430b      	orrs	r3, r1
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	e08c      	b.n	800197e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOD_PORT  : MGPIOD->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001864:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <MGPIO_voidSetPinAltFn+0x1bc>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	7979      	ldrb	r1, [r7, #5]
 800186a:	79ba      	ldrb	r2, [r7, #6]
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	fa01 f202 	lsl.w	r2, r1, r2
 8001872:	4611      	mov	r1, r2
 8001874:	4a48      	ldr	r2, [pc, #288]	; (8001998 <MGPIO_voidSetPinAltFn+0x1bc>)
 8001876:	430b      	orrs	r3, r1
 8001878:	6213      	str	r3, [r2, #32]
 800187a:	e080      	b.n	800197e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOE_PORT  : MGPIOE->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 800187c:	4b47      	ldr	r3, [pc, #284]	; (800199c <MGPIO_voidSetPinAltFn+0x1c0>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	7979      	ldrb	r1, [r7, #5]
 8001882:	79ba      	ldrb	r2, [r7, #6]
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	fa01 f202 	lsl.w	r2, r1, r2
 800188a:	4611      	mov	r1, r2
 800188c:	4a43      	ldr	r2, [pc, #268]	; (800199c <MGPIO_voidSetPinAltFn+0x1c0>)
 800188e:	430b      	orrs	r3, r1
 8001890:	6213      	str	r3, [r2, #32]
 8001892:	e074      	b.n	800197e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOH_PORT  : MGPIOH->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001894:	4b42      	ldr	r3, [pc, #264]	; (80019a0 <MGPIO_voidSetPinAltFn+0x1c4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	7979      	ldrb	r1, [r7, #5]
 800189a:	79ba      	ldrb	r2, [r7, #6]
 800189c:	0092      	lsls	r2, r2, #2
 800189e:	fa01 f202 	lsl.w	r2, r1, r2
 80018a2:	4611      	mov	r1, r2
 80018a4:	4a3e      	ldr	r2, [pc, #248]	; (80019a0 <MGPIO_voidSetPinAltFn+0x1c4>)
 80018a6:	430b      	orrs	r3, r1
 80018a8:	6213      	str	r3, [r2, #32]
 80018aa:	e068      	b.n	800197e <MGPIO_voidSetPinAltFn+0x1a2>
	// 8 : 15
	// i need 8 = 0 & 15 = 7
	
	else
	{
	switch(Copy_u8PortNum )
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d864      	bhi.n	800197c <MGPIO_voidSetPinAltFn+0x1a0>
 80018b2:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <MGPIO_voidSetPinAltFn+0xdc>)
 80018b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b8:	080018d1 	.word	0x080018d1
 80018bc:	080018ed 	.word	0x080018ed
 80018c0:	08001909 	.word	0x08001909
 80018c4:	08001925 	.word	0x08001925
 80018c8:	08001941 	.word	0x08001941
 80018cc:	0800195d 	.word	0x0800195d
		{
			 case _GPIOA_PORT  : MGPIOA->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 80018d0:	4b2e      	ldr	r3, [pc, #184]	; (800198c <MGPIO_voidSetPinAltFn+0x1b0>)
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	7979      	ldrb	r1, [r7, #5]
 80018d6:	79ba      	ldrb	r2, [r7, #6]
 80018d8:	f002 0207 	and.w	r2, r2, #7
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	fa01 f202 	lsl.w	r2, r1, r2
 80018e2:	4611      	mov	r1, r2
 80018e4:	4a29      	ldr	r2, [pc, #164]	; (800198c <MGPIO_voidSetPinAltFn+0x1b0>)
 80018e6:	430b      	orrs	r3, r1
 80018e8:	6253      	str	r3, [r2, #36]	; 0x24
 80018ea:	e048      	b.n	800197e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOB_PORT  : MGPIOB->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 80018ec:	4b28      	ldr	r3, [pc, #160]	; (8001990 <MGPIO_voidSetPinAltFn+0x1b4>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	7979      	ldrb	r1, [r7, #5]
 80018f2:	79ba      	ldrb	r2, [r7, #6]
 80018f4:	f002 0207 	and.w	r2, r2, #7
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	fa01 f202 	lsl.w	r2, r1, r2
 80018fe:	4611      	mov	r1, r2
 8001900:	4a23      	ldr	r2, [pc, #140]	; (8001990 <MGPIO_voidSetPinAltFn+0x1b4>)
 8001902:	430b      	orrs	r3, r1
 8001904:	6253      	str	r3, [r2, #36]	; 0x24
 8001906:	e03a      	b.n	800197e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOC_PORT  : MGPIOC->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 8001908:	4b22      	ldr	r3, [pc, #136]	; (8001994 <MGPIO_voidSetPinAltFn+0x1b8>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	7979      	ldrb	r1, [r7, #5]
 800190e:	79ba      	ldrb	r2, [r7, #6]
 8001910:	f002 0207 	and.w	r2, r2, #7
 8001914:	0092      	lsls	r2, r2, #2
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	4611      	mov	r1, r2
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <MGPIO_voidSetPinAltFn+0x1b8>)
 800191e:	430b      	orrs	r3, r1
 8001920:	6253      	str	r3, [r2, #36]	; 0x24
 8001922:	e02c      	b.n	800197e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOD_PORT  : MGPIOD->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 8001924:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <MGPIO_voidSetPinAltFn+0x1bc>)
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	7979      	ldrb	r1, [r7, #5]
 800192a:	79ba      	ldrb	r2, [r7, #6]
 800192c:	f002 0207 	and.w	r2, r2, #7
 8001930:	0092      	lsls	r2, r2, #2
 8001932:	fa01 f202 	lsl.w	r2, r1, r2
 8001936:	4611      	mov	r1, r2
 8001938:	4a17      	ldr	r2, [pc, #92]	; (8001998 <MGPIO_voidSetPinAltFn+0x1bc>)
 800193a:	430b      	orrs	r3, r1
 800193c:	6253      	str	r3, [r2, #36]	; 0x24
 800193e:	e01e      	b.n	800197e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOE_PORT  : MGPIOE->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <MGPIO_voidSetPinAltFn+0x1c0>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	7979      	ldrb	r1, [r7, #5]
 8001946:	79ba      	ldrb	r2, [r7, #6]
 8001948:	f002 0207 	and.w	r2, r2, #7
 800194c:	0092      	lsls	r2, r2, #2
 800194e:	fa01 f202 	lsl.w	r2, r1, r2
 8001952:	4611      	mov	r1, r2
 8001954:	4a11      	ldr	r2, [pc, #68]	; (800199c <MGPIO_voidSetPinAltFn+0x1c0>)
 8001956:	430b      	orrs	r3, r1
 8001958:	6253      	str	r3, [r2, #36]	; 0x24
 800195a:	e010      	b.n	800197e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOH_PORT  : MGPIOH->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MGPIO_voidSetPinAltFn+0x1c4>)
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	7979      	ldrb	r1, [r7, #5]
 8001962:	79ba      	ldrb	r2, [r7, #6]
 8001964:	f002 0207 	and.w	r2, r2, #7
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	fa01 f202 	lsl.w	r2, r1, r2
 800196e:	4611      	mov	r1, r2
 8001970:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <MGPIO_voidSetPinAltFn+0x1c4>)
 8001972:	430b      	orrs	r3, r1
 8001974:	6253      	str	r3, [r2, #36]	; 0x24
 8001976:	e002      	b.n	800197e <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 8001978:	bf00      	nop
 800197a:	e000      	b.n	800197e <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 800197c:	bf00      	nop
		
		
	}

	
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800
 8001998:	40020c00 	.word	0x40020c00
 800199c:	40021000 	.word	0x40021000
 80019a0:	40021c00 	.word	0x40021c00

080019a4 <MNVIC_vInterrupt_SetEnable>:

/******************************************* APIS Definition *****************************/


void MNVIC_vInterrupt_SetEnable(u8 Copy_u8Interrupt_id)
 {
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
     u8 register_number = Copy_u8Interrupt_id / Register_bits ;
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	095b      	lsrs	r3, r3, #5
 80019b2:	73fb      	strb	r3, [r7, #15]
     u8 Bit_number      = Copy_u8Interrupt_id % Register_bits ;
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	73bb      	strb	r3, [r7, #14]
     NVIC->NVIC_ISER[register_number] |= (1<<Bit_number);
 80019bc:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <MNVIC_vInterrupt_SetEnable+0x40>)
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	2101      	movs	r1, #1
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	4618      	mov	r0, r3
 80019ce:	4905      	ldr	r1, [pc, #20]	; (80019e4 <MNVIC_vInterrupt_SetEnable+0x40>)
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	4302      	orrs	r2, r0
 80019d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 }
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <MRCC_voidEnablePeripheralClock>:
/*   - Copy_u8PerName :  The Order Of Prepheral On The Selected Reg                                    */                      
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MRCC_voidEnablePeripheralClock(BusName_t BusName , u8 Copy_u8PerNum )
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	460a      	mov	r2, r1
 80019f2:	71fb      	strb	r3, [r7, #7]
 80019f4:	4613      	mov	r3, r2
 80019f6:	71bb      	strb	r3, [r7, #6]
	
	switch(BusName)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d836      	bhi.n	8001a6c <MRCC_voidEnablePeripheralClock+0x84>
 80019fe:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <MRCC_voidEnablePeripheralClock+0x1c>)
 8001a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a04:	08001a15 	.word	0x08001a15
 8001a08:	08001a2b 	.word	0x08001a2b
 8001a0c:	08001a41 	.word	0x08001a41
 8001a10:	08001a57 	.word	0x08001a57
	{
		case AHB1_BUS:  SET_BIT(RCC_AHB1ENR,Copy_u8PerNum );         break ;
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MRCC_voidEnablePeripheralClock+0x94>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	79ba      	ldrb	r2, [r7, #6]
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a20:	4611      	mov	r1, r2
 8001a22:	4a16      	ldr	r2, [pc, #88]	; (8001a7c <MRCC_voidEnablePeripheralClock+0x94>)
 8001a24:	430b      	orrs	r3, r1
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	e021      	b.n	8001a6e <MRCC_voidEnablePeripheralClock+0x86>
		case AHB2_BUS:  SET_BIT(RCC_AHB2ENR,Copy_u8PerNum );         break ;
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <MRCC_voidEnablePeripheralClock+0x98>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	79ba      	ldrb	r2, [r7, #6]
 8001a30:	2101      	movs	r1, #1
 8001a32:	fa01 f202 	lsl.w	r2, r1, r2
 8001a36:	4611      	mov	r1, r2
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <MRCC_voidEnablePeripheralClock+0x98>)
 8001a3a:	430b      	orrs	r3, r1
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e016      	b.n	8001a6e <MRCC_voidEnablePeripheralClock+0x86>
		case APB1_BUS:  SET_BIT(RCC_APB1ENR,Copy_u8PerNum );         break ;
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <MRCC_voidEnablePeripheralClock+0x9c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	79ba      	ldrb	r2, [r7, #6]
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <MRCC_voidEnablePeripheralClock+0x9c>)
 8001a50:	430b      	orrs	r3, r1
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e00b      	b.n	8001a6e <MRCC_voidEnablePeripheralClock+0x86>
		case APB2_BUS:  SET_BIT(RCC_APB2ENR,Copy_u8PerNum );         break ;
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <MRCC_voidEnablePeripheralClock+0xa0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	79ba      	ldrb	r2, [r7, #6]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a62:	4611      	mov	r1, r2
 8001a64:	4a08      	ldr	r2, [pc, #32]	; (8001a88 <MRCC_voidEnablePeripheralClock+0xa0>)
 8001a66:	430b      	orrs	r3, r1
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e000      	b.n	8001a6e <MRCC_voidEnablePeripheralClock+0x86>
		default :     /*   ERROR   */          break ;
 8001a6c:	bf00      	nop
		
	}
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023830 	.word	0x40023830
 8001a80:	40023834 	.word	0x40023834
 8001a84:	40023840 	.word	0x40023840
 8001a88:	40023844 	.word	0x40023844

08001a8c <MRCC_voidInitClock>:
/*    - HSESrc  :HSE_Crystal ,HSE_RC                                                                   */
/* 2- Function Input       -> Copy_uClkSrc   , Copy_uHSESrc    ,Copy_uPLLSrc                           */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
void MRCC_voidInitClock(CLKSrcName_t Copy_tClkSrc , HSESrc_t Copy_tHSESrc ,PLLSrc_t Copy_tPLLSrc )
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
 8001a96:	460b      	mov	r3, r1
 8001a98:	71bb      	strb	r3, [r7, #6]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	717b      	strb	r3, [r7, #5]
	switch(Copy_tClkSrc)
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d05d      	beq.n	8001b60 <MRCC_voidInitClock+0xd4>
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	f300 80de 	bgt.w	8001c66 <MRCC_voidInitClock+0x1da>
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <MRCC_voidInitClock+0x28>
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d039      	beq.n	8001b26 <MRCC_voidInitClock+0x9a>

	    break ;
		
	}
	
}
 8001ab2:	e0d8      	b.n	8001c66 <MRCC_voidInitClock+0x1da>
		switch(Copy_tHSESrc)
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <MRCC_voidInitClock+0x34>
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d019      	beq.n	8001af2 <MRCC_voidInitClock+0x66>
		  default :  break ;
 8001abe:	e031      	b.n	8001b24 <MRCC_voidInitClock+0x98>
			SET_BIT(RCC_CR,16U);
 8001ac0:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a6b      	ldr	r2, [pc, #428]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
			CLEAR_BIT(RCC_CR,18U);
 8001acc:	4b69      	ldr	r3, [pc, #420]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a68      	ldr	r2, [pc, #416]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CFGR,0U);
 8001ad8:	4b67      	ldr	r3, [pc, #412]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a66      	ldr	r2, [pc, #408]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]
			CLEAR_BIT(RCC_CFGR,1U);
 8001ae4:	4b64      	ldr	r3, [pc, #400]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a63      	ldr	r2, [pc, #396]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001aea:	f023 0302 	bic.w	r3, r3, #2
 8001aee:	6013      	str	r3, [r2, #0]
		  break ;
 8001af0:	e018      	b.n	8001b24 <MRCC_voidInitClock+0x98>
			SET_BIT(RCC_CR,16U);
 8001af2:	4b60      	ldr	r3, [pc, #384]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a5f      	ldr	r2, [pc, #380]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CR,18U);
 8001afe:	4b5d      	ldr	r3, [pc, #372]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a5c      	ldr	r2, [pc, #368]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CFGR,0U);
 8001b0a:	4b5b      	ldr	r3, [pc, #364]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a5a      	ldr	r2, [pc, #360]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6013      	str	r3, [r2, #0]
			CLEAR_BIT(RCC_CFGR,1U);
 8001b16:	4b58      	ldr	r3, [pc, #352]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a57      	ldr	r2, [pc, #348]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001b1c:	f023 0302 	bic.w	r3, r3, #2
 8001b20:	6013      	str	r3, [r2, #0]
		  break ;
 8001b22:	bf00      	nop
	    break ;
 8001b24:	e09f      	b.n	8001c66 <MRCC_voidInitClock+0x1da>
			MRCC->CR = 0;
 8001b26:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
		SET_BIT(RCC_CR,0U);
 8001b2c:	4b51      	ldr	r3, [pc, #324]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a50      	ldr	r2, [pc, #320]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]
		while(GET_BIT(MRCC->CR,1U)==0);
 8001b38:	bf00      	nop
 8001b3a:	4b4e      	ldr	r3, [pc, #312]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f9      	beq.n	8001b3a <MRCC_voidInitClock+0xae>
		CLEAR_BIT(RCC_CFGR,0U);
 8001b46:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a4b      	ldr	r2, [pc, #300]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6013      	str	r3, [r2, #0]
		CLEAR_BIT(RCC_CFGR,1U);
 8001b52:	4b49      	ldr	r3, [pc, #292]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a48      	ldr	r2, [pc, #288]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001b58:	f023 0302 	bic.w	r3, r3, #2
 8001b5c:	6013      	str	r3, [r2, #0]
	    break ;
 8001b5e:	e082      	b.n	8001c66 <MRCC_voidInitClock+0x1da>
			RCC_CR = 0;
 8001b60:	4b44      	ldr	r3, [pc, #272]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
			RCC_PLLCFGR =0;
 8001b66:	4b45      	ldr	r3, [pc, #276]	; (8001c7c <MRCC_voidInitClock+0x1f0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
		switch(Copy_tPLLSrc)
 8001b6c:	797b      	ldrb	r3, [r7, #5]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d002      	beq.n	8001b78 <MRCC_voidInitClock+0xec>
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d057      	beq.n	8001c26 <MRCC_voidInitClock+0x19a>
	    break ;
 8001b76:	e075      	b.n	8001c64 <MRCC_voidInitClock+0x1d8>
		 SET_BIT(RCC_PLLCFGR, 16U);
 8001b78:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <MRCC_voidInitClock+0x1f0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a3f      	ldr	r2, [pc, #252]	; (8001c7c <MRCC_voidInitClock+0x1f0>)
 8001b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
		 CLEAR_BIT(RCC_PLLCFGR, 17U);
 8001b84:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <MRCC_voidInitClock+0x1f0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a3c      	ldr	r2, [pc, #240]	; (8001c7c <MRCC_voidInitClock+0x1f0>)
 8001b8a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b8e:	6013      	str	r3, [r2, #0]
		 RCC_PLLCFGR |= (192<<6);
 8001b90:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <MRCC_voidInitClock+0x1f0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a39      	ldr	r2, [pc, #228]	; (8001c7c <MRCC_voidInitClock+0x1f0>)
 8001b96:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001b9a:	6013      	str	r3, [r2, #0]
		 RCC_PLLCFGR |= (16<<0);
 8001b9c:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <MRCC_voidInitClock+0x1f0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a36      	ldr	r2, [pc, #216]	; (8001c7c <MRCC_voidInitClock+0x1f0>)
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	6013      	str	r3, [r2, #0]
		 RCC_CFGR |= (0<<13);
 8001ba8:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001baa:	4a33      	ldr	r2, [pc, #204]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6013      	str	r3, [r2, #0]
		 RCC_CFGR |= (4<<10);
 8001bb0:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001bb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bba:	6013      	str	r3, [r2, #0]
		 RCC_CFGR |= (0<<4);
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001bbe:	4a2e      	ldr	r2, [pc, #184]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6013      	str	r3, [r2, #0]
		 SET_BIT(RCC_CR,16U);
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
		 while ( GET_BIT(RCC_CR, 17)==0); /* wait for hse rdy*/
 8001bd0:	bf00      	nop
 8001bd2:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f9      	beq.n	8001bd2 <MRCC_voidInitClock+0x146>
		 SET_BIT(RCC_CR,24U);
 8001bde:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001be4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be8:	6013      	str	r3, [r2, #0]
		 while ( GET_BIT(RCC_CR, 25)==0); /*wait for pll rdy*/
 8001bea:	bf00      	nop
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f9      	beq.n	8001bec <MRCC_voidInitClock+0x160>
		 SET_BIT(RCC_PLLCFGR, 22U);/*pllsrc ----> 1- select hse , 0- select hsi*/
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <MRCC_voidInitClock+0x1f0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1f      	ldr	r2, [pc, #124]	; (8001c7c <MRCC_voidInitClock+0x1f0>)
 8001bfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c02:	6013      	str	r3, [r2, #0]
		 CLEAR_BIT(RCC_CFGR,0U); /*select sw0,sw1 for pll*/
 8001c04:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6013      	str	r3, [r2, #0]
		 SET_BIT(RCC_CFGR,1U);
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	6013      	str	r3, [r2, #0]
		 RCC_CFGR |= (0<<30);
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001c1e:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6013      	str	r3, [r2, #0]
			break ;
 8001c24:	e01e      	b.n	8001c64 <MRCC_voidInitClock+0x1d8>
		     SET_BIT(RCC_CR,0U);
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CR,24U);
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <MRCC_voidInitClock+0x1e8>)
 8001c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3c:	6013      	str	r3, [r2, #0]
			CLEAR_BIT(RCC_PLLCFGR, 22U);
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MRCC_voidInitClock+0x1f0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a0e      	ldr	r2, [pc, #56]	; (8001c7c <MRCC_voidInitClock+0x1f0>)
 8001c44:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c48:	6013      	str	r3, [r2, #0]
			CLEAR_BIT(RCC_CFGR,0U);
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CFGR,1U);
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <MRCC_voidInitClock+0x1ec>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	6013      	str	r3, [r2, #0]
			break ;
 8001c62:	bf00      	nop
	    break ;
 8001c64:	bf00      	nop
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40023808 	.word	0x40023808
 8001c7c:	40023804 	.word	0x40023804

08001c80 <SysTick_vInit>:

/*************************************************************************************  APIS Definitions *******************************************************************************************************
***************************************************************************************************************************************************************************************************************/

void SysTick_vInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
	/******************************************************************* Clk Source ***************************************************************************************************/
	#if SYSTIC_CLKSOURCE_OPTION == SYSTICK_CLKSOURCE_PROCESSOR_CLK_AHB
         SET_BIT(SYSTIC->STK_CTRL,SYSTICK_CLKSOURCE_BIT);
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <SysTick_vInit+0x28>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <SysTick_vInit+0x28>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6013      	str	r3, [r2, #0]
    #endif


    /******************************************************************* Interrupt Option ***************************************************************************************************/
    #if SYSTIC_INTURRPT_OPTION == SYSTICK_INTURRPT_ENABLE
         SET_BIT(SYSTIC->STK_CTRL,SYSTICK_INTURRPT_BIT);
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <SysTick_vInit+0x28>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <SysTick_vInit+0x28>)
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	6013      	str	r3, [r2, #0]
         CLEAR_BIT(SYSTIC->STK_CTRL,SYSTICK_INTURRPT_BIT);
    #else
         #error "WRONG INPUT"
    #endif

}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <SysTick_vSetValue>:

/******************************************************************************************************************************************************************************************************************
 *****************************************************************************************************************************************************************************************************************/

void SysTick_vSetValue(u32 Copy_u32PreloadValue)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(SYSTIC->STK_CTRL,SYSTICK_EN_BIT);
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <SysTick_vSetValue+0x3c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <SysTick_vSetValue+0x3c>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]
	SYSTIC->STK_LOAD = Copy_u32PreloadValue - 1;
 8001cc0:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <SysTick_vSetValue+0x3c>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	6053      	str	r3, [r2, #4]
	SYSTIC->STK_VAL  = 0;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <SysTick_vSetValue+0x3c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
    SET_BIT(SYSTIC->STK_CTRL,SYSTICK_EN_BIT);
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <SysTick_vSetValue+0x3c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <SysTick_vSetValue+0x3c>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6013      	str	r3, [r2, #0]

}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000e010 	.word	0xe000e010

08001cec <SysTick_u8GetFlag>:

/******************************************************************************************************************************************************************************************************************
 *****************************************************************************************************************************************************************************************************************/

u8 SysTick_u8GetFlag(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return GET_BIT(SYSTIC->STK_CTRL , 16);
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <SysTick_u8GetFlag+0x1c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0c1b      	lsrs	r3, r3, #16
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e010 	.word	0xe000e010
 8001d0c:	00000000 	.word	0x00000000

08001d10 <Systic_vDelay_ms>:

/******************************************************************************************************************************************************************************************************************
 *****************************************************************************************************************************************************************************************************************/

void Systic_vDelay_ms(u32 Copy_u32_Time_in_ms)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	 CLEAR_BIT(SYSTIC->STK_CTRL,SYSTICK_EN_BIT);
 8001d18:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <Systic_vDelay_ms+0x90>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <Systic_vDelay_ms+0x90>)
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	6013      	str	r3, [r2, #0]
	 u32 number_of_ticks = (Copy_u32_Time_in_ms/1000.0)*Freq_cpu;
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7fe fb99 	bl	800045c <__aeabi_ui2d>
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <Systic_vDelay_ms+0x94>)
 8001d30:	f7fe fd38 	bl	80007a4 <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	a316      	add	r3, pc, #88	; (adr r3, 8001d98 <Systic_vDelay_ms+0x88>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fc05 	bl	8000550 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe fe11 	bl	8000974 <__aeabi_d2uiz>
 8001d52:	4603      	mov	r3, r0
 8001d54:	60fb      	str	r3, [r7, #12]
	 if(number_of_ticks > 0xffffff)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d5c:	d30e      	bcc.n	8001d7c <Systic_vDelay_ms+0x6c>
	 {
		 number_of_ticks = number_of_ticks - 0xffffff;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8001d64:	3301      	adds	r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
		 SysTick_vSetValue(0xffffff);
 8001d68:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001d6c:	f7ff ff9e 	bl	8001cac <SysTick_vSetValue>
	     while(SysTick_u8GetFlag() == 0);
 8001d70:	bf00      	nop
 8001d72:	f7ff ffbb 	bl	8001cec <SysTick_u8GetFlag>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0fa      	beq.n	8001d72 <Systic_vDelay_ms+0x62>
	 }
	 SysTick_vSetValue(number_of_ticks);
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7ff ff95 	bl	8001cac <SysTick_vSetValue>
	 while(SysTick_u8GetFlag() == 0);
 8001d82:	bf00      	nop
 8001d84:	f7ff ffb2 	bl	8001cec <SysTick_u8GetFlag>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0fa      	beq.n	8001d84 <Systic_vDelay_ms+0x74>
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	416e8480 	.word	0x416e8480
 8001da0:	e000e010 	.word	0xe000e010
 8001da4:	408f4000 	.word	0x408f4000

08001da8 <SysTick_Handler>:


/******************************************************************************************************************************************************************************************************************
 *****************************************************************************************************************************************************************************************************************/

void SysTick_Handler(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
    if (Global_pfuncCBF != NULL) {
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <SysTick_Handler+0x18>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <SysTick_Handler+0x12>
    	Global_pfuncCBF();
 8001db4:	4b02      	ldr	r3, [pc, #8]	; (8001dc0 <SysTick_Handler+0x18>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4798      	blx	r3
    }
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000034 	.word	0x20000034

08001dc4 <UART_vInit>:
 *                                                     APIs
 * ===============================================================================================================
 * */

void UART_vInit(u8 Copy_u8UartNumber, UART_tstrConfiguration* Add_pstrConfigue)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]

   switch(Copy_u8UartNumber)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	f000 80bd 	beq.w	8001f52 <UART_vInit+0x18e>
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	f300 8114 	bgt.w	8002006 <UART_vInit+0x242>
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <UART_vInit+0x24>
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d05b      	beq.n	8001e9e <UART_vInit+0xda>
        		 {
        			 UART6->USART_CR1 |= (Add_pstrConfigue->UART_Interrupt_Enable);
        			 MNVIC_vInterrupt_SetEnable(71);  //enable uart6 from nvic
        		 }
        		 break;
          default: break;
 8001de6:	e10e      	b.n	8002006 <UART_vInit+0x242>
        	    Global_Uart_Config1 = Add_pstrConfigue; //buffer the Add_pstrConfigue
 8001de8:	4a8c      	ldr	r2, [pc, #560]	; (800201c <UART_vInit+0x258>)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6013      	str	r3, [r2, #0]
        		UART1->USART_CR1 |= 1<<13;
 8001dee:	4b8c      	ldr	r3, [pc, #560]	; (8002020 <UART_vInit+0x25c>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4a8b      	ldr	r2, [pc, #556]	; (8002020 <UART_vInit+0x25c>)
 8001df4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001df8:	60d3      	str	r3, [r2, #12]
        		UART1->USART_CR1   |=  Add_pstrConfigue->UART_Mode;
 8001dfa:	4b89      	ldr	r3, [pc, #548]	; (8002020 <UART_vInit+0x25c>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	8812      	ldrh	r2, [r2, #0]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4a86      	ldr	r2, [pc, #536]	; (8002020 <UART_vInit+0x25c>)
 8001e06:	430b      	orrs	r3, r1
 8001e08:	60d3      	str	r3, [r2, #12]
        		UART1->USART_CR1   |=  Add_pstrConfigue->UART_WordLength;
 8001e0a:	4b85      	ldr	r3, [pc, #532]	; (8002020 <UART_vInit+0x25c>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	88d2      	ldrh	r2, [r2, #6]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4a82      	ldr	r2, [pc, #520]	; (8002020 <UART_vInit+0x25c>)
 8001e16:	430b      	orrs	r3, r1
 8001e18:	60d3      	str	r3, [r2, #12]
        		UART1->USART_CR1   |=  Add_pstrConfigue->UART_ParityBit;
 8001e1a:	4b81      	ldr	r3, [pc, #516]	; (8002020 <UART_vInit+0x25c>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	8852      	ldrh	r2, [r2, #2]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4a7e      	ldr	r2, [pc, #504]	; (8002020 <UART_vInit+0x25c>)
 8001e26:	430b      	orrs	r3, r1
 8001e28:	60d3      	str	r3, [r2, #12]
        		UART1->USART_CR2   |=  Add_pstrConfigue->UART_PStopBits;
 8001e2a:	4b7d      	ldr	r3, [pc, #500]	; (8002020 <UART_vInit+0x25c>)
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	8892      	ldrh	r2, [r2, #4]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4a7a      	ldr	r2, [pc, #488]	; (8002020 <UART_vInit+0x25c>)
 8001e36:	430b      	orrs	r3, r1
 8001e38:	6113      	str	r3, [r2, #16]
        		 UART1->USART_BRR    =  (UART_BRR_Register(PCLK2 , Add_pstrConfigue->UART_BaudRate)) ;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	4a78      	ldr	r2, [pc, #480]	; (8002024 <UART_vInit+0x260>)
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	011a      	lsls	r2, r3, #4
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4976      	ldr	r1, [pc, #472]	; (8002028 <UART_vInit+0x264>)
 8001e50:	fbb1 f1f3 	udiv	r1, r1, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	4872      	ldr	r0, [pc, #456]	; (8002024 <UART_vInit+0x260>)
 8001e5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e60:	2064      	movs	r0, #100	; 0x64
 8001e62:	fb00 f303 	mul.w	r3, r0, r3
 8001e66:	1acb      	subs	r3, r1, r3
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	4970      	ldr	r1, [pc, #448]	; (800202c <UART_vInit+0x268>)
 8001e6c:	fba1 1303 	umull	r1, r3, r1, r3
 8001e70:	095b      	lsrs	r3, r3, #5
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	496a      	ldr	r1, [pc, #424]	; (8002020 <UART_vInit+0x25c>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]
        		 if(Add_pstrConfigue->UART_Interrupt_Enable != UART_INT_DISABLE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	899b      	ldrh	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80c2 	beq.w	800200a <UART_vInit+0x246>
        			 UART1->USART_CR1 |= (Add_pstrConfigue->UART_Interrupt_Enable);
 8001e86:	4b66      	ldr	r3, [pc, #408]	; (8002020 <UART_vInit+0x25c>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	8992      	ldrh	r2, [r2, #12]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4a63      	ldr	r2, [pc, #396]	; (8002020 <UART_vInit+0x25c>)
 8001e92:	430b      	orrs	r3, r1
 8001e94:	60d3      	str	r3, [r2, #12]
        			 MNVIC_vInterrupt_SetEnable(37); //enable uart1 from nvic
 8001e96:	2025      	movs	r0, #37	; 0x25
 8001e98:	f7ff fd84 	bl	80019a4 <MNVIC_vInterrupt_SetEnable>
        		 break;
 8001e9c:	e0b5      	b.n	800200a <UART_vInit+0x246>
    	        Global_Uart_Config2 = Add_pstrConfigue; //buffer the Add_pstrConfigue
 8001e9e:	4a64      	ldr	r2, [pc, #400]	; (8002030 <UART_vInit+0x26c>)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6013      	str	r3, [r2, #0]
        		UART2->USART_CR1 |= 1<<13;
 8001ea4:	4b63      	ldr	r3, [pc, #396]	; (8002034 <UART_vInit+0x270>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4a62      	ldr	r2, [pc, #392]	; (8002034 <UART_vInit+0x270>)
 8001eaa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eae:	60d3      	str	r3, [r2, #12]
        		UART2->USART_CR1   |=  Add_pstrConfigue->UART_Mode;
 8001eb0:	4b60      	ldr	r3, [pc, #384]	; (8002034 <UART_vInit+0x270>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	8812      	ldrh	r2, [r2, #0]
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4a5e      	ldr	r2, [pc, #376]	; (8002034 <UART_vInit+0x270>)
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	60d3      	str	r3, [r2, #12]
        		UART2->USART_CR1   |=  Add_pstrConfigue->UART_WordLength;
 8001ec0:	4b5c      	ldr	r3, [pc, #368]	; (8002034 <UART_vInit+0x270>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	88d2      	ldrh	r2, [r2, #6]
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4a5a      	ldr	r2, [pc, #360]	; (8002034 <UART_vInit+0x270>)
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	60d3      	str	r3, [r2, #12]
        		UART2->USART_CR1   |=  Add_pstrConfigue->UART_ParityBit;
 8001ed0:	4b58      	ldr	r3, [pc, #352]	; (8002034 <UART_vInit+0x270>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	8852      	ldrh	r2, [r2, #2]
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4a56      	ldr	r2, [pc, #344]	; (8002034 <UART_vInit+0x270>)
 8001edc:	430b      	orrs	r3, r1
 8001ede:	60d3      	str	r3, [r2, #12]
        		UART2->USART_CR2   |=  Add_pstrConfigue->UART_PStopBits;
 8001ee0:	4b54      	ldr	r3, [pc, #336]	; (8002034 <UART_vInit+0x270>)
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	8892      	ldrh	r2, [r2, #4]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4a52      	ldr	r2, [pc, #328]	; (8002034 <UART_vInit+0x270>)
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6113      	str	r3, [r2, #16]
        		UART2->USART_BRR    =  UART_BRR_Register( PCLK1 , Add_pstrConfigue->UART_BaudRate );
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	4a4b      	ldr	r2, [pc, #300]	; (8002024 <UART_vInit+0x260>)
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	011a      	lsls	r2, r3, #4
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4948      	ldr	r1, [pc, #288]	; (8002028 <UART_vInit+0x264>)
 8001f06:	fbb1 f1f3 	udiv	r1, r1, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	4844      	ldr	r0, [pc, #272]	; (8002024 <UART_vInit+0x260>)
 8001f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f16:	2064      	movs	r0, #100	; 0x64
 8001f18:	fb00 f303 	mul.w	r3, r0, r3
 8001f1c:	1acb      	subs	r3, r1, r3
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	4942      	ldr	r1, [pc, #264]	; (800202c <UART_vInit+0x268>)
 8001f22:	fba1 1303 	umull	r1, r3, r1, r3
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	4941      	ldr	r1, [pc, #260]	; (8002034 <UART_vInit+0x270>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
        		 if(Add_pstrConfigue->UART_Interrupt_Enable != UART_INT_DISABLE)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	899b      	ldrh	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d069      	beq.n	800200e <UART_vInit+0x24a>
        			 UART2->USART_CR1 |= (Add_pstrConfigue->UART_Interrupt_Enable);
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	; (8002034 <UART_vInit+0x270>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	8992      	ldrh	r2, [r2, #12]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4a3b      	ldr	r2, [pc, #236]	; (8002034 <UART_vInit+0x270>)
 8001f46:	430b      	orrs	r3, r1
 8001f48:	60d3      	str	r3, [r2, #12]
        			 MNVIC_vInterrupt_SetEnable(38);  //enable uart2 from nvic
 8001f4a:	2026      	movs	r0, #38	; 0x26
 8001f4c:	f7ff fd2a 	bl	80019a4 <MNVIC_vInterrupt_SetEnable>
        		 break;
 8001f50:	e05d      	b.n	800200e <UART_vInit+0x24a>
    	        Global_Uart_Config6 = Add_pstrConfigue; //buffer the Add_pstrConfigue
 8001f52:	4a39      	ldr	r2, [pc, #228]	; (8002038 <UART_vInit+0x274>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6013      	str	r3, [r2, #0]
        		UART6->USART_CR1 |= 1<<13;
 8001f58:	4b38      	ldr	r3, [pc, #224]	; (800203c <UART_vInit+0x278>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4a37      	ldr	r2, [pc, #220]	; (800203c <UART_vInit+0x278>)
 8001f5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f62:	60d3      	str	r3, [r2, #12]
        		UART6->USART_CR1   |=  Add_pstrConfigue->UART_Mode;
 8001f64:	4b35      	ldr	r3, [pc, #212]	; (800203c <UART_vInit+0x278>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	8812      	ldrh	r2, [r2, #0]
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4a33      	ldr	r2, [pc, #204]	; (800203c <UART_vInit+0x278>)
 8001f70:	430b      	orrs	r3, r1
 8001f72:	60d3      	str	r3, [r2, #12]
        		UART6->USART_CR1   |=  Add_pstrConfigue->UART_WordLength;
 8001f74:	4b31      	ldr	r3, [pc, #196]	; (800203c <UART_vInit+0x278>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	88d2      	ldrh	r2, [r2, #6]
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4a2f      	ldr	r2, [pc, #188]	; (800203c <UART_vInit+0x278>)
 8001f80:	430b      	orrs	r3, r1
 8001f82:	60d3      	str	r3, [r2, #12]
        		UART6->USART_CR1   |=  Add_pstrConfigue->UART_ParityBit;
 8001f84:	4b2d      	ldr	r3, [pc, #180]	; (800203c <UART_vInit+0x278>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	8852      	ldrh	r2, [r2, #2]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4a2b      	ldr	r2, [pc, #172]	; (800203c <UART_vInit+0x278>)
 8001f90:	430b      	orrs	r3, r1
 8001f92:	60d3      	str	r3, [r2, #12]
        		UART6->USART_CR2   |=  Add_pstrConfigue->UART_PStopBits;
 8001f94:	4b29      	ldr	r3, [pc, #164]	; (800203c <UART_vInit+0x278>)
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	8892      	ldrh	r2, [r2, #4]
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4a27      	ldr	r2, [pc, #156]	; (800203c <UART_vInit+0x278>)
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6113      	str	r3, [r2, #16]
        		UART6->USART_BRR    =  UART_BRR_Register( PCLK2 , Add_pstrConfigue->UART_BaudRate );
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <UART_vInit+0x260>)
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	011a      	lsls	r2, r3, #4
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	491b      	ldr	r1, [pc, #108]	; (8002028 <UART_vInit+0x264>)
 8001fba:	fbb1 f1f3 	udiv	r1, r1, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	4817      	ldr	r0, [pc, #92]	; (8002024 <UART_vInit+0x260>)
 8001fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fca:	2064      	movs	r0, #100	; 0x64
 8001fcc:	fb00 f303 	mul.w	r3, r0, r3
 8001fd0:	1acb      	subs	r3, r1, r3
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	4915      	ldr	r1, [pc, #84]	; (800202c <UART_vInit+0x268>)
 8001fd6:	fba1 1303 	umull	r1, r3, r1, r3
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	4916      	ldr	r1, [pc, #88]	; (800203c <UART_vInit+0x278>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
        		 if(Add_pstrConfigue->UART_Interrupt_Enable != UART_INT_DISABLE)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	899b      	ldrh	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d011      	beq.n	8002012 <UART_vInit+0x24e>
        			 UART6->USART_CR1 |= (Add_pstrConfigue->UART_Interrupt_Enable);
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <UART_vInit+0x278>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	8992      	ldrh	r2, [r2, #12]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4a10      	ldr	r2, [pc, #64]	; (800203c <UART_vInit+0x278>)
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	60d3      	str	r3, [r2, #12]
        			 MNVIC_vInterrupt_SetEnable(71);  //enable uart6 from nvic
 8001ffe:	2047      	movs	r0, #71	; 0x47
 8002000:	f7ff fcd0 	bl	80019a4 <MNVIC_vInterrupt_SetEnable>
        		 break;
 8002004:	e005      	b.n	8002012 <UART_vInit+0x24e>
          default: break;
 8002006:	bf00      	nop
 8002008:	e004      	b.n	8002014 <UART_vInit+0x250>
        		 break;
 800200a:	bf00      	nop
 800200c:	e002      	b.n	8002014 <UART_vInit+0x250>
        		 break;
 800200e:	bf00      	nop
 8002010:	e000      	b.n	8002014 <UART_vInit+0x250>
        		 break;
 8002012:	bf00      	nop

   }



}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000038 	.word	0x20000038
 8002020:	40011000 	.word	0x40011000
 8002024:	00f42400 	.word	0x00f42400
 8002028:	17d78400 	.word	0x17d78400
 800202c:	51eb851f 	.word	0x51eb851f
 8002030:	2000003c 	.word	0x2000003c
 8002034:	40004400 	.word	0x40004400
 8002038:	20000040 	.word	0x20000040
 800203c:	40011400 	.word	0x40011400

08002040 <UART_vTransmite>:



void UART_vTransmite(u8 Copy_u8UartNumber, u16 Copy_u8Data, enum Polling_Mechanism PollingEN)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
 800204a:	460b      	mov	r3, r1
 800204c:	80bb      	strh	r3, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	71bb      	strb	r3, [r7, #6]
	switch( Copy_u8UartNumber)
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d03c      	beq.n	80020d2 <UART_vTransmite+0x92>
 8002058:	2b03      	cmp	r3, #3
 800205a:	dc55      	bgt.n	8002108 <UART_vTransmite+0xc8>
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <UART_vTransmite+0x26>
 8002060:	2b01      	cmp	r3, #1
 8002062:	d01b      	beq.n	800209c <UART_vTransmite+0x5c>
						else
						{
							UART6->USART_DR = (Copy_u8Data & (u8)0xff);
						}
						break;
			default: break;
 8002064:	e050      	b.n	8002108 <UART_vTransmite+0xc8>
				if(PollingEN == enable)
 8002066:	79bb      	ldrb	r3, [r7, #6]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <UART_vTransmite+0x3a>
					while(! (UART1->USART_SR & (1<<7)) );
 800206c:	bf00      	nop
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <UART_vTransmite+0xd8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f9      	beq.n	800206e <UART_vTransmite+0x2e>
				if(Global_Uart_Config1->UART_WordLength == UART_NINE_DATA_BITS)
 800207a:	4b28      	ldr	r3, [pc, #160]	; (800211c <UART_vTransmite+0xdc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	88db      	ldrh	r3, [r3, #6]
 8002080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002084:	d105      	bne.n	8002092 <UART_vTransmite+0x52>
					 UART1->USART_DR = (Copy_u8Data & (u16)0x01ff);
 8002086:	88bb      	ldrh	r3, [r7, #4]
 8002088:	4a23      	ldr	r2, [pc, #140]	; (8002118 <UART_vTransmite+0xd8>)
 800208a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800208e:	6053      	str	r3, [r2, #4]
				break;
 8002090:	e03b      	b.n	800210a <UART_vTransmite+0xca>
					 UART1->USART_DR = (Copy_u8Data & (u8)0xff);
 8002092:	88bb      	ldrh	r3, [r7, #4]
 8002094:	4a20      	ldr	r2, [pc, #128]	; (8002118 <UART_vTransmite+0xd8>)
 8002096:	b2db      	uxtb	r3, r3
 8002098:	6053      	str	r3, [r2, #4]
				break;
 800209a:	e036      	b.n	800210a <UART_vTransmite+0xca>
						if(PollingEN == enable)
 800209c:	79bb      	ldrb	r3, [r7, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <UART_vTransmite+0x70>
							while(! (UART2->USART_SR & (1<<7)) );
 80020a2:	bf00      	nop
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <UART_vTransmite+0xe0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f9      	beq.n	80020a4 <UART_vTransmite+0x64>
						if(Global_Uart_Config2->UART_WordLength == UART_NINE_DATA_BITS)
 80020b0:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <UART_vTransmite+0xe4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	88db      	ldrh	r3, [r3, #6]
 80020b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ba:	d105      	bne.n	80020c8 <UART_vTransmite+0x88>
							UART2->USART_DR = (Copy_u8Data & (u16)0x01ff);
 80020bc:	88bb      	ldrh	r3, [r7, #4]
 80020be:	4a18      	ldr	r2, [pc, #96]	; (8002120 <UART_vTransmite+0xe0>)
 80020c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020c4:	6053      	str	r3, [r2, #4]
						break;
 80020c6:	e020      	b.n	800210a <UART_vTransmite+0xca>
							UART2->USART_DR = (Copy_u8Data & (u8)0xff);
 80020c8:	88bb      	ldrh	r3, [r7, #4]
 80020ca:	4a15      	ldr	r2, [pc, #84]	; (8002120 <UART_vTransmite+0xe0>)
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	6053      	str	r3, [r2, #4]
						break;
 80020d0:	e01b      	b.n	800210a <UART_vTransmite+0xca>
						if(PollingEN == enable)
 80020d2:	79bb      	ldrb	r3, [r7, #6]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d106      	bne.n	80020e6 <UART_vTransmite+0xa6>
							while(! (UART6->USART_SR & (1<<7)) );
 80020d8:	bf00      	nop
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <UART_vTransmite+0xe8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f9      	beq.n	80020da <UART_vTransmite+0x9a>
						if(Global_Uart_Config6->UART_WordLength == UART_NINE_DATA_BITS)
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <UART_vTransmite+0xec>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	88db      	ldrh	r3, [r3, #6]
 80020ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f0:	d105      	bne.n	80020fe <UART_vTransmite+0xbe>
							UART6->USART_DR = (Copy_u8Data & (u16)0x01ff);
 80020f2:	88bb      	ldrh	r3, [r7, #4]
 80020f4:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <UART_vTransmite+0xe8>)
 80020f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fa:	6053      	str	r3, [r2, #4]
						break;
 80020fc:	e005      	b.n	800210a <UART_vTransmite+0xca>
							UART6->USART_DR = (Copy_u8Data & (u8)0xff);
 80020fe:	88bb      	ldrh	r3, [r7, #4]
 8002100:	4a09      	ldr	r2, [pc, #36]	; (8002128 <UART_vTransmite+0xe8>)
 8002102:	b2db      	uxtb	r3, r3
 8002104:	6053      	str	r3, [r2, #4]
						break;
 8002106:	e000      	b.n	800210a <UART_vTransmite+0xca>
			default: break;
 8002108:	bf00      	nop
	}


}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40011000 	.word	0x40011000
 800211c:	20000038 	.word	0x20000038
 8002120:	40004400 	.word	0x40004400
 8002124:	2000003c 	.word	0x2000003c
 8002128:	40011400 	.word	0x40011400
 800212c:	20000040 	.word	0x20000040

08002130 <UART_u8Recive>:



u8 UART_u8Recive(u8 Copy_u8UartNumber, enum Polling_Mechanism PollingEN)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	460a      	mov	r2, r1
 800213a:	71fb      	strb	r3, [r7, #7]
 800213c:	4613      	mov	r3, r2
 800213e:	71bb      	strb	r3, [r7, #6]

	switch(Copy_u8UartNumber)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	2b03      	cmp	r3, #3
 8002144:	d061      	beq.n	800220a <UART_u8Recive+0xda>
 8002146:	2b03      	cmp	r3, #3
 8002148:	f300 808c 	bgt.w	8002264 <UART_u8Recive+0x134>
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <UART_u8Recive+0x26>
 8002150:	2b01      	cmp	r3, #1
 8002152:	d02d      	beq.n	80021b0 <UART_u8Recive+0x80>
								// parity is used, so 7-bits will be of user data and the msb is parity
								 return (UART6->USART_DR & (u8)0x7f);
							}
						}
						break;
		  default: break;
 8002154:	e086      	b.n	8002264 <UART_u8Recive+0x134>
			    if(PollingEN == enable)
 8002156:	79bb      	ldrb	r3, [r7, #6]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d106      	bne.n	800216a <UART_u8Recive+0x3a>
				    while(! (UART1->USART_SR & (1<<5)) );
 800215c:	bf00      	nop
 800215e:	4b45      	ldr	r3, [pc, #276]	; (8002274 <UART_u8Recive+0x144>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f9      	beq.n	800215e <UART_u8Recive+0x2e>
				if(Global_Uart_Config1->UART_WordLength == UART_NINE_DATA_BITS)
 800216a:	4b43      	ldr	r3, [pc, #268]	; (8002278 <UART_u8Recive+0x148>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	88db      	ldrh	r3, [r3, #6]
 8002170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002174:	d10c      	bne.n	8002190 <UART_u8Recive+0x60>
					if(Global_Uart_Config1->UART_ParityBit == UART_NONE_PARITY)
 8002176:	4b40      	ldr	r3, [pc, #256]	; (8002278 <UART_u8Recive+0x148>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	885b      	ldrh	r3, [r3, #2]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d103      	bne.n	8002188 <UART_u8Recive+0x58>
						 return UART1->USART_DR;
 8002180:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <UART_u8Recive+0x144>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	e06e      	b.n	8002266 <UART_u8Recive+0x136>
						 return (UART1->USART_DR & (u8)0xff);
 8002188:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <UART_u8Recive+0x144>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e06a      	b.n	8002266 <UART_u8Recive+0x136>
					if(Global_Uart_Config1->UART_ParityBit == UART_NONE_PARITY)
 8002190:	4b39      	ldr	r3, [pc, #228]	; (8002278 <UART_u8Recive+0x148>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	885b      	ldrh	r3, [r3, #2]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d103      	bne.n	80021a2 <UART_u8Recive+0x72>
						 return UART1->USART_DR;
 800219a:	4b36      	ldr	r3, [pc, #216]	; (8002274 <UART_u8Recive+0x144>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	e061      	b.n	8002266 <UART_u8Recive+0x136>
						 return (UART1->USART_DR & (u8)0x7f);
 80021a2:	4b34      	ldr	r3, [pc, #208]	; (8002274 <UART_u8Recive+0x144>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	e05a      	b.n	8002266 <UART_u8Recive+0x136>
					    if(PollingEN == enable)
 80021b0:	79bb      	ldrb	r3, [r7, #6]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <UART_u8Recive+0x94>
						    while(! (UART2->USART_SR & (1<<5)) );
 80021b6:	bf00      	nop
 80021b8:	4b30      	ldr	r3, [pc, #192]	; (800227c <UART_u8Recive+0x14c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0320 	and.w	r3, r3, #32
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f9      	beq.n	80021b8 <UART_u8Recive+0x88>
						if(Global_Uart_Config2->UART_WordLength == UART_NINE_DATA_BITS)
 80021c4:	4b2e      	ldr	r3, [pc, #184]	; (8002280 <UART_u8Recive+0x150>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	88db      	ldrh	r3, [r3, #6]
 80021ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ce:	d10c      	bne.n	80021ea <UART_u8Recive+0xba>
							if(Global_Uart_Config2->UART_ParityBit == UART_NONE_PARITY)
 80021d0:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <UART_u8Recive+0x150>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	885b      	ldrh	r3, [r3, #2]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <UART_u8Recive+0xb2>
								 return UART2->USART_DR;
 80021da:	4b28      	ldr	r3, [pc, #160]	; (800227c <UART_u8Recive+0x14c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	e041      	b.n	8002266 <UART_u8Recive+0x136>
								 return (UART2->USART_DR & (u8)0xff);
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <UART_u8Recive+0x14c>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	e03d      	b.n	8002266 <UART_u8Recive+0x136>
							if(Global_Uart_Config2->UART_ParityBit == UART_NONE_PARITY)
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <UART_u8Recive+0x150>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	885b      	ldrh	r3, [r3, #2]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d103      	bne.n	80021fc <UART_u8Recive+0xcc>
								 return UART2->USART_DR;
 80021f4:	4b21      	ldr	r3, [pc, #132]	; (800227c <UART_u8Recive+0x14c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e034      	b.n	8002266 <UART_u8Recive+0x136>
								 return (UART2->USART_DR & (u8)0x7f);
 80021fc:	4b1f      	ldr	r3, [pc, #124]	; (800227c <UART_u8Recive+0x14c>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002206:	b2db      	uxtb	r3, r3
 8002208:	e02d      	b.n	8002266 <UART_u8Recive+0x136>
					    if(PollingEN == enable)
 800220a:	79bb      	ldrb	r3, [r7, #6]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <UART_u8Recive+0xee>
						    while(! (UART6->USART_SR & (1<<5)) );
 8002210:	bf00      	nop
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <UART_u8Recive+0x154>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f9      	beq.n	8002212 <UART_u8Recive+0xe2>
						if(Global_Uart_Config6->UART_WordLength == UART_NINE_DATA_BITS)
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <UART_u8Recive+0x158>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	88db      	ldrh	r3, [r3, #6]
 8002224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002228:	d10c      	bne.n	8002244 <UART_u8Recive+0x114>
							if(Global_Uart_Config6->UART_ParityBit == UART_NONE_PARITY)
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <UART_u8Recive+0x158>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	885b      	ldrh	r3, [r3, #2]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d103      	bne.n	800223c <UART_u8Recive+0x10c>
								 return UART6->USART_DR;
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <UART_u8Recive+0x154>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e014      	b.n	8002266 <UART_u8Recive+0x136>
								 return (UART6->USART_DR & (u8)0xff);
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <UART_u8Recive+0x154>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	e010      	b.n	8002266 <UART_u8Recive+0x136>
							if(Global_Uart_Config6->UART_ParityBit == UART_NONE_PARITY)
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <UART_u8Recive+0x158>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	885b      	ldrh	r3, [r3, #2]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d103      	bne.n	8002256 <UART_u8Recive+0x126>
								 return UART6->USART_DR;
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <UART_u8Recive+0x154>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	e007      	b.n	8002266 <UART_u8Recive+0x136>
								 return (UART6->USART_DR & (u8)0x7f);
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <UART_u8Recive+0x154>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002260:	b2db      	uxtb	r3, r3
 8002262:	e000      	b.n	8002266 <UART_u8Recive+0x136>
		  default: break;
 8002264:	bf00      	nop
	}

}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40011000 	.word	0x40011000
 8002278:	20000038 	.word	0x20000038
 800227c:	40004400 	.word	0x40004400
 8002280:	2000003c 	.word	0x2000003c
 8002284:	40011400 	.word	0x40011400
 8002288:	20000040 	.word	0x20000040

0800228c <USART1_IRQHandler>:

/**************** GPIO *****************/
// ??????????????????????????????

void USART1_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	Global_Uart_Config1->p_IRQ_CallBack();
 8002290:	4b02      	ldr	r3, [pc, #8]	; (800229c <USART1_IRQHandler+0x10>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	4798      	blx	r3
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000038 	.word	0x20000038

080022a0 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	Global_Uart_Config2->p_IRQ_CallBack();
 80022a4:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <USART2_IRQHandler+0x10>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	4798      	blx	r3
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	2000003c 	.word	0x2000003c

080022b4 <USART6_IRQHandler>:


void USART6_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	Global_Uart_Config6->p_IRQ_CallBack();
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <USART6_IRQHandler+0x10>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	4798      	blx	r3
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000040 	.word	0x20000040

080022c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022c8:	480d      	ldr	r0, [pc, #52]	; (8002300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80022cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d0:	480c      	ldr	r0, [pc, #48]	; (8002304 <LoopForever+0x6>)
  ldr r1, =_edata
 80022d2:	490d      	ldr	r1, [pc, #52]	; (8002308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <LoopForever+0xe>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022d8:	e002      	b.n	80022e0 <LoopCopyDataInit>

080022da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022de:	3304      	adds	r3, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e4:	d3f9      	bcc.n	80022da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022e8:	4c0a      	ldr	r4, [pc, #40]	; (8002314 <LoopForever+0x16>)
  movs r3, #0
 80022ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ec:	e001      	b.n	80022f2 <LoopFillZerobss>

080022ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f0:	3204      	adds	r2, #4

080022f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f4:	d3fb      	bcc.n	80022ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80022f6:	f000 f811 	bl	800231c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022fa:	f7fe fcbf 	bl	8000c7c <main>

080022fe <LoopForever>:

LoopForever:
  b LoopForever
 80022fe:	e7fe      	b.n	80022fe <LoopForever>
  ldr   r0, =_estack
 8002300:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002308:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800230c:	0800238c 	.word	0x0800238c
  ldr r2, =_sbss
 8002310:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002314:	20000044 	.word	0x20000044

08002318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002318:	e7fe      	b.n	8002318 <ADC_IRQHandler>
	...

0800231c <__libc_init_array>:
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	4d0d      	ldr	r5, [pc, #52]	; (8002354 <__libc_init_array+0x38>)
 8002320:	4c0d      	ldr	r4, [pc, #52]	; (8002358 <__libc_init_array+0x3c>)
 8002322:	1b64      	subs	r4, r4, r5
 8002324:	10a4      	asrs	r4, r4, #2
 8002326:	2600      	movs	r6, #0
 8002328:	42a6      	cmp	r6, r4
 800232a:	d109      	bne.n	8002340 <__libc_init_array+0x24>
 800232c:	4d0b      	ldr	r5, [pc, #44]	; (800235c <__libc_init_array+0x40>)
 800232e:	4c0c      	ldr	r4, [pc, #48]	; (8002360 <__libc_init_array+0x44>)
 8002330:	f000 f818 	bl	8002364 <_init>
 8002334:	1b64      	subs	r4, r4, r5
 8002336:	10a4      	asrs	r4, r4, #2
 8002338:	2600      	movs	r6, #0
 800233a:	42a6      	cmp	r6, r4
 800233c:	d105      	bne.n	800234a <__libc_init_array+0x2e>
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	f855 3b04 	ldr.w	r3, [r5], #4
 8002344:	4798      	blx	r3
 8002346:	3601      	adds	r6, #1
 8002348:	e7ee      	b.n	8002328 <__libc_init_array+0xc>
 800234a:	f855 3b04 	ldr.w	r3, [r5], #4
 800234e:	4798      	blx	r3
 8002350:	3601      	adds	r6, #1
 8002352:	e7f2      	b.n	800233a <__libc_init_array+0x1e>
 8002354:	08002384 	.word	0x08002384
 8002358:	08002384 	.word	0x08002384
 800235c:	08002384 	.word	0x08002384
 8002360:	08002388 	.word	0x08002388

08002364 <_init>:
 8002364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002366:	bf00      	nop
 8002368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236a:	bc08      	pop	{r3}
 800236c:	469e      	mov	lr, r3
 800236e:	4770      	bx	lr

08002370 <_fini>:
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	bf00      	nop
 8002374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002376:	bc08      	pop	{r3}
 8002378:	469e      	mov	lr, r3
 800237a:	4770      	bx	lr
